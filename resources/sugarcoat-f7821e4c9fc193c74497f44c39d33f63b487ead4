{
    const $___mock_156feb4ab3828779 = {};
    (exports => {
        'use strict';
        const xhrUnsent = 0;
        const xhrOpened = 1;
        const xhrHeadersReceived = 2;
        const xhrLoading = 3;
        const xhrDone = 4;
        const xhrDeferredHandleSymbol = Symbol('deferredHandle');
        const xhrOnLoadStartSymbol = Symbol('onloadstart');
        const xhrOnProgressSymbol = Symbol('onprogress');
        const xhrOnAbortSymbol = Symbol('onabort');
        const xhrOnErrorSymbol = Symbol('onerror');
        const xhrOnLoadSymbol = Symbol('onload');
        const xhrOnTimeoutSymbol = Symbol('ontimeout');
        const xhrOnLoadEndSymbol = Symbol('onloadend');
        const xhrOnReadyStateChangeSymbol = Symbol('onreadystatechange');
        const xhrReadyStateSymbol = Symbol('readyState');
        const xhrTimeoutSymbol = Symbol('timeout');
        const xhrWithCredentialsSymbol = Symbol('withCredentials');
        const xhrUploadSymbol = Symbol('upload');
        const xhrResponseTypeSymbol = Symbol('responseType');
        const defineEvent = (obj, symbol) => {
            const type = symbol.description.substring(2);
            Object.defineProperty(obj, symbol, {
                configurable: false,
                enumerable: false,
                value: null,
                writable: true
            });
            obj.addEventListener(type, function (event) {
                const handler = this[symbol];
                if (handler) {
                    handler.call(this, event);
                }
            });
        };
        const changeReadyState = (xhr, readyState) => {
            xhr[xhrReadyStateSymbol] = readyState;
            xhr.dispatchEvent(new Event('readystatechange'));
        };
        let isSealed = true;
        class XMLHttpRequestEventTarget extends EventTarget {
            constructor() {
                super();
                if (!(this instanceof XMLHttpRequest) && !(this instanceof XMLHttpRequestUpload)) {
                    throw new TypeError('Illegal constructor');
                }
                defineEvent(this, xhrOnLoadStartSymbol);
                defineEvent(this, xhrOnProgressSymbol);
                defineEvent(this, xhrOnAbortSymbol);
                defineEvent(this, xhrOnErrorSymbol);
                defineEvent(this, xhrOnLoadSymbol);
                defineEvent(this, xhrOnTimeoutSymbol);
                defineEvent(this, xhrOnLoadEndSymbol);
            }
            get onloadstart() {
                return this[xhrOnLoadStartSymbol];
            }
            set onloadstart(value) {
                this[xhrOnLoadStartSymbol] = value;
            }
            get onprogress() {
                return this[xhrOnProgressSymbol];
            }
            set onprogress(value) {
                this[xhrOnProgressSymbol] = value;
            }
            get onabort() {
                return this[xhrOnAbortSymbol];
            }
            set onabort(value) {
                this[xhrOnAbortSymbol] = value;
            }
            get onerror() {
                return this[xhrOnErrorSymbol];
            }
            set onerror(value) {
                this[xhrOnErrorSymbol] = value;
            }
            get ontimeout() {
                return this[xhrOnTimeoutSymbol];
            }
            set ontimeout(value) {
                this[xhrOnTimeoutSymbol] = value;
            }
            get onloadend() {
                return this[xhrOnLoadEndSymbol];
            }
            set onloadend(value) {
                this[xhrOnLoadEndSymbol] = value;
            }
        }
        exports.XMLHttpRequestEventTarget = {
            configurable: true,
            enumerable: true,
            value: XMLHttpRequestEventTarget,
            writable: true
        };
        class XMLHttpRequestUpload extends XMLHttpRequestEventTarget {
            constructor() {
                if (isSealed) {
                    throw new TypeError('Illegal constructor');
                }
                super();
            }
        }
        exports.XMLHttpRequestUpload = {
            configurable: true,
            enumerable: true,
            value: XMLHttpRequestUpload,
            writable: true
        };
        class XMLHttpRequest extends XMLHttpRequestEventTarget {
            constructor() {
                super();
                isSealed = false;
                const xhrUpload = new XMLHttpRequestUpload();
                isSealed = true;
                Object.defineProperty(this, xhrDeferredHandleSymbol, {
                    configurable: false,
                    enumerable: false,
                    value: null,
                    writable: true
                });
                defineEvent(this, xhrOnReadyStateChangeSymbol);
                Object.defineProperty(this, xhrReadyStateSymbol, {
                    configurable: false,
                    enumerable: false,
                    value: xhrUnsent,
                    writable: true
                });
                Object.defineProperty(this, xhrTimeoutSymbol, {
                    configurable: false,
                    enumerable: false,
                    value: 0,
                    writable: true
                });
                Object.defineProperty(this, xhrWithCredentialsSymbol, {
                    configurable: false,
                    enumerable: false,
                    value: false,
                    writable: true
                });
                Object.defineProperty(this, xhrUploadSymbol, {
                    configurable: false,
                    enumerable: false,
                    value: xhrUpload,
                    writable: false
                });
                Object.defineProperty(this, xhrResponseTypeSymbol, {
                    configurable: false,
                    enumerable: false,
                    value: '',
                    writable: true
                });
            }
            get onreadystatechange() {
                return this[xhrOnReadyStateChangeSymbol];
            }
            set onreadystatechange(value) {
                this[xhrOnReadyStateChangeSymbol] = value;
            }
            get readyState() {
                return this[xhrReadyStateSymbol];
            }
            open(method, url) {
                switch (this[xhrReadyStateSymbol]) {
                case xhrUnsent:
                case xhrDone: {
                        changeReadyState(this, xhrOpened);
                        break;
                    }
                }
            }
            setRequestHeader(name, value) {
            }
            setTrustToken(trustToken) {
            }
            get timeout() {
                return this[xhrTimeoutSymbol];
            }
            set timeout(value) {
                this[xhrTimeoutSymbol] = value;
            }
            get withCredentials() {
                return this[xhrWithCredentialsSymbol];
            }
            set withCredentials(value) {
                switch (this[xhrReadyStateSymbol]) {
                case xhrUnsent:
                case xhrOpened: {
                        break;
                    }
                default: {
                        throw new DOMException('Failed to set the \'withCredentials\' property on \'XMLHttpRequest\': The value may only be set if the object\'s state is UNSENT or OPENED.');
                    }
                }
                this[xhrWithCredentialsSymbol] = !!value;
            }
            get upload() {
                return this[xhrUploadSymbol];
            }
            send() {
                if (this[xhrReadyStateSymbol] === xhrOpened && this[xhrDeferredHandleSymbol] === null) {
                    this[xhrDeferredHandleSymbol] = setTimeout(() => {
                        this[xhrDeferredHandleSymbol] = null;
                        changeReadyState(this, xhrDone);
                        this.dispatchEvent(new ProgressEvent('error'));
                        this.dispatchEvent(new ProgressEvent('loadend'));
                    }, 0);
                } else {
                    throw new DOMException('Failed to execute \'send\' on \'XMLHttpRequest\': The object\'s state must be OPENED.');
                }
            }
            abort() {
                if (this[xhrReadyStateSymbol] === xhrOpened && this[xhrDeferredHandleSymbol] !== null) {
                    clearTimeout(this[xhrDeferredHandleSymbol]);
                    this[xhrDeferredHandleSymbol] = null;
                    changeReadyState(this, xhrUnsent);
                    this.dispatchEvent(new ProgressEvent('abort'));
                    this.dispatchEvent(new ProgressEvent('loadend'));
                }
            }
            get responseURL() {
                return '';
            }
            get status() {
                return 0;
            }
            get statusText() {
                return '';
            }
            getResponseHeader(name) {
                return null;
            }
            overrideMimeType(mime) {
            }
            get responseType() {
                return this[xhrResponseTypeSymbol];
            }
            set responseType(value) {
                switch (this[xhrReadyStateSymbol]) {
                case xhrDone: {
                        throw new DOMException('Failed to set the \'responseType\' property on \'XMLHttpRequest\': The response type cannot be set if the object\'s state is LOADING or DONE.');
                    }
                }
                switch (value) {
                case '':
                case 'arraybuffer':
                case 'blob':
                case 'document':
                case 'json':
                case 'text': {
                        this[xhrResponseTypeSymbol] = value;
                        break;
                    }
                }
            }
            get response() {
                const responseType = this[xhrResponseTypeSymbol];
                return responseType === '' || responseType === 'text' ? '' : null;
            }
            get responseText() {
                const responseType = this[xhrResponseTypeSymbol];
                if (responseType === '' || responseType === 'text') {
                    return '';
                } else {
                    throw new DOMException('Failed to read the \'responseText\' property from \'XMLHttpRequest\': The value is only accessible if the object\'s \'responseType\' is \'\' or \'text\' (was \'arraybuffer\').');
                }
            }
            get responseXML() {
                return null;
            }
        }
        Object.defineProperty(XMLHttpRequest, 'UNSENT', {
            configurable: false,
            enumerable: true,
            value: xhrUnsent
        });
        Object.defineProperty(XMLHttpRequest, 'OPENED', {
            configurable: false,
            enumerable: true,
            value: xhrOpened
        });
        Object.defineProperty(XMLHttpRequest, 'HEADERS_RECEIVED', {
            configurable: false,
            enumerable: true,
            value: xhrHeadersReceived
        });
        Object.defineProperty(XMLHttpRequest, 'LOADING', {
            configurable: false,
            enumerable: true,
            value: xhrLoading
        });
        Object.defineProperty(XMLHttpRequest, 'DONE', {
            configurable: false,
            enumerable: true,
            value: xhrDone
        });
        exports.XMLHttpRequest = {
            configurable: true,
            enumerable: true,
            value: XMLHttpRequest,
            writable: true
        };
    })($___mock_156feb4ab3828779);
    (function () {
        !function () {
            'use strict';
            var e = {}, t = {};
            function n(r) {
                const $___old_dd3c3a06f6f70973 = {}.constructor.getOwnPropertyDescriptor(window, 'XMLHttpRequest');
                try {
                    if ($___old_dd3c3a06f6f70973)
                        ({}.constructor.defineProperty(window, 'XMLHttpRequest', $___mock_156feb4ab3828779.XMLHttpRequest));
                    return function () {
                        var o = t[r];
                        if (void 0 !== o)
                            return o.exports;
                        var f = t[r] = {
                                id: r,
                                loaded: !1,
                                exports: {}
                            }, i = !0;
                        try {
                            e[r].call(f.exports, f, f.exports, n), i = !1;
                        } finally {
                            i && delete t[r];
                        }
                        return f.loaded = !0, f.exports;
                    }.apply(this, arguments);
                } finally {
                    if ($___old_dd3c3a06f6f70973)
                        ({}.constructor.defineProperty(window, 'XMLHttpRequest', $___old_dd3c3a06f6f70973));
                }
            }
            n.m = e, function () {
                var e = [];
                n.O = function (t, r, o, f) {
                    if (!r) {
                        var i = 1 / 0;
                        for (a = 0; a < e.length; a++) {
                            r = e[a][0], o = e[a][1], f = e[a][2];
                            for (var u = !0, c = 0; c < r.length; c++)
                                (!1 & f || i >= f) && Object.keys(n.O).every(function (e) {
                                    return n.O[e](r[c]);
                                }) ? r.splice(c--, 1) : (u = !1, f < i && (i = f));
                            u && (e.splice(a--, 1), t = o());
                        }
                        return t;
                    }
                    f = f || 0;
                    for (var a = e.length; a > 0 && e[a - 1][2] > f; a--)
                        e[a] = e[a - 1];
                    e[a] = [
                        r,
                        o,
                        f
                    ];
                };
            }(), n.n = function (e) {
                var t = e && e.__esModule ? function () {
                    return e.default;
                } : function () {
                    return e;
                };
                return n.d(t, { a: t }), t;
            }, function () {
                var e, t = Object.getPrototypeOf ? function (e) {
                        return Object.getPrototypeOf(e);
                    } : function (e) {
                        return e.__proto__;
                    };
                n.t = function (r, o) {
                    if (1 & o && (r = this(r)), 8 & o)
                        return r;
                    if ('object' === typeof r && r) {
                        if (4 & o && r.__esModule)
                            return r;
                        if (16 & o && 'function' === typeof r.then)
                            return r;
                    }
                    var f = Object.create(null);
                    n.r(f);
                    var i = {};
                    e = e || [
                        null,
                        t({}),
                        t([]),
                        t(t)
                    ];
                    for (var u = 2 & o && r; 'object' == typeof u && !~e.indexOf(u); u = t(u))
                        Object.getOwnPropertyNames(u).forEach(function (e) {
                            i[e] = function () {
                                return r[e];
                            };
                        });
                    return i.default = function () {
                        return r;
                    }, n.d(f, i), f;
                };
            }(), n.d = function (e, t) {
                for (var r in t)
                    n.o(t, r) && !n.o(e, r) && Object.defineProperty(e, r, {
                        enumerable: !0,
                        get: t[r]
                    });
            }, n.f = {}, n.e = function (e) {
                return Promise.all(Object.keys(n.f).reduce(function (t, r) {
                    return n.f[r](e, t), t;
                }, []));
            }, n.u = function (e) {
                return 'static/chunks/' + ({
                    214: 'polyfills-core-js',
                    748: 'polyfills-dom'
                }[e] || e) + '.' + {
                    207: '3e4d124bd8f96085cb2a',
                    214: 'fc93702d6990ca2f6768',
                    294: 'd60c85938f6fe27e9f5f',
                    308: '5addbf5f05fd0530e590',
                    406: 'd5e7ef3ec4c82e016f71',
                    478: '9bf26115defdacbef24a',
                    529: '286552def56c6b224c2b',
                    670: '2cea16ed3a7c521198e9',
                    710: '6efcfd2a737e39e5040d',
                    748: '92f90749b2b5e8ed7e85',
                    832: '3af7869bdf78b2607af3',
                    842: 'e97c0d2dbc2ef6357ee6'
                }[e] + '.js';
            }, n.miniCssF = function (e) {
                return 'static/css/5cee20566c551430b231.css';
            }, n.g = function () {
                if ('object' === typeof globalThis)
                    return globalThis;
                try {
                    return this || new Function('return this')();
                } catch (e) {
                    if ('object' === typeof window)
                        return window;
                }
            }(), n.o = function (e, t) {
                return Object.prototype.hasOwnProperty.call(e, t);
            }, function () {
                var e = {}, t = '_N_E:';
                n.l = function (r, o, f, i) {
                    if (e[r])
                        e[r].push(o);
                    else {
                        var u, c;
                        if (void 0 !== f)
                            for (var a = document.getElementsByTagName('script'), d = 0; d < a.length; d++) {
                                var l = a[d];
                                if (l.getAttribute('src') == r || l.getAttribute('data-webpack') == t + f) {
                                    u = l;
                                    break;
                                }
                            }
                        u || (c = !0, (u = document.createElement('script')).charset = 'utf-8', u.timeout = 120, n.nc && u.setAttribute('nonce', n.nc), u.setAttribute('data-webpack', t + f), u.src = r), e[r] = [o];
                        var s = function (t, n) {
                                u.onerror = u.onload = null, clearTimeout(b);
                                var o = e[r];
                                if (delete e[r], u.parentNode && u.parentNode.removeChild(u), o && o.forEach(function (e) {
                                        return e(n);
                                    }), t)
                                    return t(n);
                            }, b = setTimeout(s.bind(null, void 0, {
                                type: 'timeout',
                                target: u
                            }), 120000);
                        u.onerror = s.bind(null, u.onerror), u.onload = s.bind(null, u.onload), c && document.head.appendChild(u);
                    }
                };
            }(), n.r = function (e) {
                'undefined' !== typeof Symbol && Symbol.toStringTag && Object.defineProperty(e, Symbol.toStringTag, { value: 'Module' }), Object.defineProperty(e, '__esModule', { value: !0 });
            }, n.nmd = function (e) {
                return e.paths = [], e.children || (e.children = []), e;
            }, n.p = '/_next/', function () {
                var e = { 272: 0 };
                n.f.j = function (t, r) {
                    var o = n.o(e, t) ? e[t] : void 0;
                    if (0 !== o)
                        if (o)
                            r.push(o[2]);
                        else if (272 != t) {
                            var f = new Promise(function (n, r) {
                                o = e[t] = [
                                    n,
                                    r
                                ];
                            });
                            r.push(o[2] = f);
                            var i = n.p + n.u(t), u = new Error();
                            n.l(i, function (r) {
                                if (n.o(e, t) && (0 !== (o = e[t]) && (e[t] = void 0), o)) {
                                    var f = r && ('load' === r.type ? 'missing' : r.type), i = r && r.target && r.target.src;
                                    u.message = 'Loading chunk ' + t + ' failed.\n(' + f + ': ' + i + ')', u.name = 'ChunkLoadError', u.type = f, u.request = i, o[1](u);
                                }
                            }, 'chunk-' + t, t);
                        } else
                            e[t] = 0;
                }, n.O.j = function (t) {
                    return 0 === e[t];
                };
                var t = function (t, r) {
                        var o, f, i = r[0], u = r[1], c = r[2], a = 0;
                        for (o in u)
                            n.o(u, o) && (n.m[o] = u[o]);
                        if (c)
                            var d = c(n);
                        for (t && t(r); a < i.length; a++)
                            f = i[a], n.o(e, f) && e[f] && e[f][0](), e[i[a]] = 0;
                        return n.O(d);
                    }, r = self.webpackChunk_N_E = self.webpackChunk_N_E || [];
                r.forEach(t.bind(null, 0)), r.push = t.bind(null, r.push.bind(r));
            }();
        }();
    }())
}