{
    const $___mock_bcdb6054439d7278 = {};
    (exports => {
        'use strict';
        const xhrUnsent = 0;
        const xhrOpened = 1;
        const xhrHeadersReceived = 2;
        const xhrLoading = 3;
        const xhrDone = 4;
        const xhrDeferredHandleSymbol = Symbol('deferredHandle');
        const xhrOnLoadStartSymbol = Symbol('onloadstart');
        const xhrOnProgressSymbol = Symbol('onprogress');
        const xhrOnAbortSymbol = Symbol('onabort');
        const xhrOnErrorSymbol = Symbol('onerror');
        const xhrOnLoadSymbol = Symbol('onload');
        const xhrOnTimeoutSymbol = Symbol('ontimeout');
        const xhrOnLoadEndSymbol = Symbol('onloadend');
        const xhrOnReadyStateChangeSymbol = Symbol('onreadystatechange');
        const xhrReadyStateSymbol = Symbol('readyState');
        const xhrTimeoutSymbol = Symbol('timeout');
        const xhrWithCredentialsSymbol = Symbol('withCredentials');
        const xhrUploadSymbol = Symbol('upload');
        const xhrResponseTypeSymbol = Symbol('responseType');
        const defineEvent = (obj, symbol) => {
            const type = symbol.description.substring(2);
            Object.defineProperty(obj, symbol, {
                configurable: false,
                enumerable: false,
                value: null,
                writable: true
            });
            obj.addEventListener(type, function (event) {
                const handler = this[symbol];
                if (handler) {
                    handler.call(this, event);
                }
            });
        };
        const changeReadyState = (xhr, readyState) => {
            xhr[xhrReadyStateSymbol] = readyState;
            xhr.dispatchEvent(new Event('readystatechange'));
        };
        let isSealed = true;
        class XMLHttpRequestEventTarget extends EventTarget {
            constructor() {
                super();
                if (!(this instanceof XMLHttpRequest) && !(this instanceof XMLHttpRequestUpload)) {
                    throw new TypeError('Illegal constructor');
                }
                defineEvent(this, xhrOnLoadStartSymbol);
                defineEvent(this, xhrOnProgressSymbol);
                defineEvent(this, xhrOnAbortSymbol);
                defineEvent(this, xhrOnErrorSymbol);
                defineEvent(this, xhrOnLoadSymbol);
                defineEvent(this, xhrOnTimeoutSymbol);
                defineEvent(this, xhrOnLoadEndSymbol);
            }
            get onloadstart() {
                return this[xhrOnLoadStartSymbol];
            }
            set onloadstart(value) {
                this[xhrOnLoadStartSymbol] = value;
            }
            get onprogress() {
                return this[xhrOnProgressSymbol];
            }
            set onprogress(value) {
                this[xhrOnProgressSymbol] = value;
            }
            get onabort() {
                return this[xhrOnAbortSymbol];
            }
            set onabort(value) {
                this[xhrOnAbortSymbol] = value;
            }
            get onerror() {
                return this[xhrOnErrorSymbol];
            }
            set onerror(value) {
                this[xhrOnErrorSymbol] = value;
            }
            get ontimeout() {
                return this[xhrOnTimeoutSymbol];
            }
            set ontimeout(value) {
                this[xhrOnTimeoutSymbol] = value;
            }
            get onloadend() {
                return this[xhrOnLoadEndSymbol];
            }
            set onloadend(value) {
                this[xhrOnLoadEndSymbol] = value;
            }
        }
        exports.XMLHttpRequestEventTarget = {
            configurable: true,
            enumerable: true,
            value: XMLHttpRequestEventTarget,
            writable: true
        };
        class XMLHttpRequestUpload extends XMLHttpRequestEventTarget {
            constructor() {
                if (isSealed) {
                    throw new TypeError('Illegal constructor');
                }
                super();
            }
        }
        exports.XMLHttpRequestUpload = {
            configurable: true,
            enumerable: true,
            value: XMLHttpRequestUpload,
            writable: true
        };
        class XMLHttpRequest extends XMLHttpRequestEventTarget {
            constructor() {
                super();
                isSealed = false;
                const xhrUpload = new XMLHttpRequestUpload();
                isSealed = true;
                Object.defineProperty(this, xhrDeferredHandleSymbol, {
                    configurable: false,
                    enumerable: false,
                    value: null,
                    writable: true
                });
                defineEvent(this, xhrOnReadyStateChangeSymbol);
                Object.defineProperty(this, xhrReadyStateSymbol, {
                    configurable: false,
                    enumerable: false,
                    value: xhrUnsent,
                    writable: true
                });
                Object.defineProperty(this, xhrTimeoutSymbol, {
                    configurable: false,
                    enumerable: false,
                    value: 0,
                    writable: true
                });
                Object.defineProperty(this, xhrWithCredentialsSymbol, {
                    configurable: false,
                    enumerable: false,
                    value: false,
                    writable: true
                });
                Object.defineProperty(this, xhrUploadSymbol, {
                    configurable: false,
                    enumerable: false,
                    value: xhrUpload,
                    writable: false
                });
                Object.defineProperty(this, xhrResponseTypeSymbol, {
                    configurable: false,
                    enumerable: false,
                    value: '',
                    writable: true
                });
            }
            get onreadystatechange() {
                return this[xhrOnReadyStateChangeSymbol];
            }
            set onreadystatechange(value) {
                this[xhrOnReadyStateChangeSymbol] = value;
            }
            get readyState() {
                return this[xhrReadyStateSymbol];
            }
            open(method, url) {
                switch (this[xhrReadyStateSymbol]) {
                case xhrUnsent:
                case xhrDone: {
                        changeReadyState(this, xhrOpened);
                        break;
                    }
                }
            }
            setRequestHeader(name, value) {
            }
            setTrustToken(trustToken) {
            }
            get timeout() {
                return this[xhrTimeoutSymbol];
            }
            set timeout(value) {
                this[xhrTimeoutSymbol] = value;
            }
            get withCredentials() {
                return this[xhrWithCredentialsSymbol];
            }
            set withCredentials(value) {
                switch (this[xhrReadyStateSymbol]) {
                case xhrUnsent:
                case xhrOpened: {
                        break;
                    }
                default: {
                        throw new DOMException('Failed to set the \'withCredentials\' property on \'XMLHttpRequest\': The value may only be set if the object\'s state is UNSENT or OPENED.');
                    }
                }
                this[xhrWithCredentialsSymbol] = !!value;
            }
            get upload() {
                return this[xhrUploadSymbol];
            }
            send() {
                if (this[xhrReadyStateSymbol] === xhrOpened && this[xhrDeferredHandleSymbol] === null) {
                    this[xhrDeferredHandleSymbol] = setTimeout(() => {
                        this[xhrDeferredHandleSymbol] = null;
                        changeReadyState(this, xhrDone);
                        this.dispatchEvent(new ProgressEvent('error'));
                        this.dispatchEvent(new ProgressEvent('loadend'));
                    }, 0);
                } else {
                    throw new DOMException('Failed to execute \'send\' on \'XMLHttpRequest\': The object\'s state must be OPENED.');
                }
            }
            abort() {
                if (this[xhrReadyStateSymbol] === xhrOpened && this[xhrDeferredHandleSymbol] !== null) {
                    clearTimeout(this[xhrDeferredHandleSymbol]);
                    this[xhrDeferredHandleSymbol] = null;
                    changeReadyState(this, xhrUnsent);
                    this.dispatchEvent(new ProgressEvent('abort'));
                    this.dispatchEvent(new ProgressEvent('loadend'));
                }
            }
            get responseURL() {
                return '';
            }
            get status() {
                return 0;
            }
            get statusText() {
                return '';
            }
            getResponseHeader(name) {
                return null;
            }
            overrideMimeType(mime) {
            }
            get responseType() {
                return this[xhrResponseTypeSymbol];
            }
            set responseType(value) {
                switch (this[xhrReadyStateSymbol]) {
                case xhrDone: {
                        throw new DOMException('Failed to set the \'responseType\' property on \'XMLHttpRequest\': The response type cannot be set if the object\'s state is LOADING or DONE.');
                    }
                }
                switch (value) {
                case '':
                case 'arraybuffer':
                case 'blob':
                case 'document':
                case 'json':
                case 'text': {
                        this[xhrResponseTypeSymbol] = value;
                        break;
                    }
                }
            }
            get response() {
                const responseType = this[xhrResponseTypeSymbol];
                return responseType === '' || responseType === 'text' ? '' : null;
            }
            get responseText() {
                const responseType = this[xhrResponseTypeSymbol];
                if (responseType === '' || responseType === 'text') {
                    return '';
                } else {
                    throw new DOMException('Failed to read the \'responseText\' property from \'XMLHttpRequest\': The value is only accessible if the object\'s \'responseType\' is \'\' or \'text\' (was \'arraybuffer\').');
                }
            }
            get responseXML() {
                return null;
            }
        }
        Object.defineProperty(XMLHttpRequest, 'UNSENT', {
            configurable: false,
            enumerable: true,
            value: xhrUnsent
        });
        Object.defineProperty(XMLHttpRequest, 'OPENED', {
            configurable: false,
            enumerable: true,
            value: xhrOpened
        });
        Object.defineProperty(XMLHttpRequest, 'HEADERS_RECEIVED', {
            configurable: false,
            enumerable: true,
            value: xhrHeadersReceived
        });
        Object.defineProperty(XMLHttpRequest, 'LOADING', {
            configurable: false,
            enumerable: true,
            value: xhrLoading
        });
        Object.defineProperty(XMLHttpRequest, 'DONE', {
            configurable: false,
            enumerable: true,
            value: xhrDone
        });
        exports.XMLHttpRequest = {
            configurable: true,
            enumerable: true,
            value: XMLHttpRequest,
            writable: true
        };
    })($___mock_bcdb6054439d7278);
    (function () {
        (function () {
            var g = e;
            function e(a, b) {
                var c, d, f = h(window.top);
                for (c = f.length; c--;)
                    try {
                        if ((d = f[c]) && (d = d[a]) && (d = d.shared))
                            return d;
                    } catch (l) {
                    }
                return window[a].shared = b;
            }
            function h(a, b) {
                try {
                    var c = a.frames;
                } catch (f) {
                }
                if (c) {
                    (b = b || []).push(a);
                    for (var d = 0; c && d < c.length; d++)
                        h(a.frames[d], b);
                }
                return b;
            }
            ;
            function k(a, b, c) {
                a.addEventListener ? a.addEventListener(b, c, !1) : a.attachEvent && a.attachEvent('on' + b, c);
            }
            function m(a, b, c) {
                a.removeEventListener ? a.removeEventListener(b, c, !1) : a.detachEvent && a.detachEvent('on' + b, c);
            }
            ;
            var p = n;
            function n(a) {
                try {
                    return a();
                } catch (b) {
                }
            }
            ;
            var r = q, t = window.top;
            function q(a) {
                for (var b, c, d = window; d;) {
                    if (p(function () {
                            return d.frames[a];
                        })) {
                        b = d;
                        break;
                    }
                    if (d === t)
                        break;
                    d = d.parent;
                }
                b && (c = !p(function () {
                    return !!b.document.getElementById;
                }));
                return {
                    frameRef: b,
                    isCrossDomain: c
                };
            }
            ;
            var v = u;
            window.Adform = window.Adform || {};
            var w = window.__uspapi, x = r('__uspapiLocator'), y = x.frameRef, z = x.isCrossDomain;
            z && y && y.postMessage ? (k(window, 'message', A), y.postMessage({
                __uspapiCall: {
                    command: 'getUSPData',
                    version: 1,
                    callId: 1
                }
            }, '*')) : y && !z && y.__uspapi && (w = y.__uspapi);
            w && p(function () {
                return w('getUSPData', 1, B);
            });
            function u() {
                return g('Adform', {}).us_privacy;
            }
            function A(a) {
                var b = a.data;
                'string' === typeof b && (b = p(function () {
                    return window.JSON.parse(b);
                }));
                b && (b = b.__uspapiReturn || {});
                b && b.success && (m(window, 'message', A), B(b.returnValue));
            }
            function B(a) {
                a = void 0 === a ? {} : a;
                g('Adform', {}).us_privacy = a.uspString;
            }
            ;
            var C = window.setTimeout, D, E, F = 1, G = [], H = [], I = window.Adform = window.Adform || {};
            I.getConsent = J;
            I.waitForConsent = M;
            I.hasConsent = aa;
            I.getUSPString = v;
            N();
            g('Adform', {});
            O();
            function aa(a) {
                M(function (b) {
                    a(null === b ? !0 : b.adform_consent);
                }, 10000, !0);
            }
            function M(a, b, c) {
                b = void 0 === b ? 10000 : b;
                c = void 0 === c ? !1 : c;
                N();
                D || window.__tcfapi ? (c ? H.push(a) : G.push(a), O(), C(function () {
                    var b = [
                            P(G, a),
                            P(H, a)
                        ], c = g('Adform', {}), l = c.gdpr, K = c.gdpr_consent, L = c.adform_consent;
                    c = c.us_privacy;
                    if (-1 < b[0])
                        G.splice(b[0], 1)[0]({
                            gdpr: l,
                            gdpr_consent: K,
                            adform_consent: L,
                            us_privacy: c
                        });
                    if (-1 < b[1])
                        H.splice(b[1], 1)[0]({
                            gdpr: l,
                            gdpr_consent: K,
                            adform_consent: L,
                            us_privacy: c
                        });
                }, b)) : a(null, 'CMP not found.');
            }
            function N() {
                if (!D) {
                    var a = r('__tcfapiLocator');
                    a.frameRef && (D = a.frameRef, E = a.isCrossDomain);
                }
                return {
                    cmpFrame: D,
                    isCrossDomain: E
                };
            }
            function J() {
                O();
                var a = g('Adform', {});
                return {
                    gdpr: a.gdpr,
                    gdpr_consent: a.gdpr_consent,
                    us_privacy: a.us_privacy
                };
            }
            function O() {
                if (E && D && D.postMessage) {
                    var a = window.__tcfapi;
                    m(window, 'message', Q);
                    k(window, 'message', Q);
                    D.postMessage({
                        __tcfapiCall: {
                            command: 'addEventListener',
                            callId: F++
                        }
                    }, '*');
                } else
                    a = D && !E ? D.__tcfapi : window.__tcfapi;
                a && p(function () {
                    return a('addEventListener', null, R);
                });
            }
            function Q(a) {
                var b = a.data;
                'string' === typeof b && (b = p(function () {
                    return window.JSON.parse(b);
                }));
                b && (b = (b.__tcfapiReturn || {}).returnValue);
                b && null != b.gdprApplies && (a = b, R({
                    gdprApplies: a.gdprApplies,
                    tcString: a.tcString,
                    purpose: a.purpose,
                    vendor: a.vendor,
                    restrictions: a.restrictions,
                    eventStatus: a.eventStatus
                }));
            }
            function R(a) {
                a = void 0 === a ? {} : a;
                if ('cmpuishown' !== a.eventStatus) {
                    var b = S(a.gdprApplies), c = g('Adform', {});
                    c.gdpr = b;
                    c.gdpr_consent = a.tcString;
                    if (b = !(!a.purpose || !a.vendor) || 0 === b) {
                        var d = a;
                        a = d.gdprApplies;
                        var f = T(d, 'purpose.consents.1', !1), l = T(d, 'vendor.consents.50', !1);
                        d = T(d, 'restrictions.1.50', 1);
                        a = 0 === S(a) ? !0 : f && l && 0 !== d;
                        c.adform_consent = a;
                    }
                    a = c.gdpr;
                    f = c.gdpr_consent;
                    c = c.adform_consent;
                    if (void 0 !== c && b)
                        for (; H.length;)
                            H.shift()({
                                gdpr: a,
                                gdpr_consent: f,
                                adform_consent: c
                            });
                    for (; G.length;)
                        G.shift()({
                            gdpr: a,
                            gdpr_consent: f,
                            adform_consent: c
                        });
                }
            }
            function S(a) {
                if ('1' == a)
                    return 1;
                if ('0' == a)
                    return 0;
            }
            function P(a, b) {
                var c = a.length;
                if (a.indexOf)
                    return a.indexOf(b);
                for (; c-- && a[c] !== b;);
                return c;
            }
            function T(a, b, c) {
                b = b.split('.');
                for (var d = 0; d < b.length; d++)
                    if (a = a[b[d]], void 0 === a) {
                        a = c;
                        break;
                    }
                return a;
            }
            ;
            for (var ba = Array.prototype.slice, U = {}, V = {
                        init: ca,
                        cookieSegments: da
                    }, W = window.AdformAT && window.AdformAT.q || []; 0 in W;)
                X(W.shift());
            W.push = X;
            window.AdformAT = Y;
            function da(a) {
                var b = U.baseUrl + '/cookiesegments?token=' + U.token;
                M(function (c) {
                    c && (b += '&gdpr=' + Z(c.gdpr) + '&gdpr_consent=' + Z(c.gdpr_consent));
                    (c = v()) && (b += '&us_privacy=' + c);
                    ea(b, a);
                });
            }
            function ea(a, b) {
                const $___old_fe28794cae62d4b3 = {}.constructor.getOwnPropertyDescriptor(window, 'XMLHttpRequest'), $___old_51e623b05487f9ee = {}.constructor.getOwnPropertyDescriptor(window, 'XMLHttpRequest');
                try {
                    if ($___old_fe28794cae62d4b3)
                        ({}.constructor.defineProperty(window, 'XMLHttpRequest', $___mock_bcdb6054439d7278.XMLHttpRequest));
                    if ($___old_51e623b05487f9ee)
                        ({}.constructor.defineProperty(window, 'XMLHttpRequest', $___mock_bcdb6054439d7278.XMLHttpRequest));
                    return function () {
                        var c = new window.XMLHttpRequest();
                        c.open('GET', a, !0);
                        c.setRequestHeader('Accept', 'application/json');
                        c.withCredentials = !0;
                        c.onreadystatechange = function () {
                            const $___old_a0ae845d458e177a = {}.constructor.getOwnPropertyDescriptor(window, 'XMLHttpRequest');
                            try {
                                if ($___old_a0ae845d458e177a)
                                    ({}.constructor.defineProperty(window, 'XMLHttpRequest', $___mock_bcdb6054439d7278.XMLHttpRequest));
                                return function () {
                                    c.readyState === window.XMLHttpRequest.DONE && b(c.status, c.response || c.responseText, c);
                                }.apply(this, arguments);
                            } finally {
                                if ($___old_a0ae845d458e177a)
                                    ({}.constructor.defineProperty(window, 'XMLHttpRequest', $___old_a0ae845d458e177a));
                            }
                        };
                        c.onerror = function () {
                            return b(null, 'Error', c);
                        };
                        c.ontimeout = function () {
                            return b(null, 'Timeout', c);
                        };
                        c.send();
                    }.apply(this, arguments);
                } finally {
                    if ($___old_fe28794cae62d4b3)
                        ({}.constructor.defineProperty(window, 'XMLHttpRequest', $___old_fe28794cae62d4b3));
                    if ($___old_51e623b05487f9ee)
                        ({}.constructor.defineProperty(window, 'XMLHttpRequest', $___old_51e623b05487f9ee));
                }
            }
            function ca(a, b) {
                U.token = a;
                U.baseUrl = b || 'https://dmp.adform.net/audiencetag';
            }
            function Y(a) {
                V[a] && V[a].apply(null, ba.call(arguments, 1));
                return Y;
            }
            function Z(a) {
                return void 0 === a ? '' : '' + a;
            }
            function X(a) {
                return Y.apply(null, a);
            }
            ;
        }());
    }())
}