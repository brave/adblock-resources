[{"name":"brave-fix","aliases":[],"kind":{"mime":"application/javascript"},"content":"Ly8vIGJyYXZlLWZpeC5qcwovLy8gYWxpYXMgYmYuanMKZGVsZXRlIE5hdmlnYXRvci5wcm90b3R5cGUuYnJhdmUKZGVsZXRlIHdpbmRvdy5uYXZpZ2F0b3IuYnJhdmUK"},{"name":"sugarcoat-04f269ddab55349c262c62c9eaad20beb4273ffb","aliases":[],"kind":{"mime":"application/javascript"},"content":"{
    const $___mock_381e5c7674c55798 = {};
    (exports => {
        'use strict';
        const fetch = async (resource, init = null) => {
            throw new TypeError('Failed to fetch');
        };
        exports.fetch = {
            configurable: true,
            enumerable: true,
            value: fetch,
            writable: true
        };
    })($___mock_381e5c7674c55798);
    const $___mock_a20a509b4e76ca1d = {};
    (exports => {
        'use strict';
        let isSealed = false;
        class Storage {
            constructor() {
                if (isSealed) {
                    throw new TypeError('Illegal constructor');
                }
            }
            get length() {
                return Object.keys(this).length;
            }
            key(index) {
                const keys = Object.keys(this);
                if (index < 0 || index >= keys.length) {
                    return null;
                }
                return keys[index];
            }
            getItem(key) {
                return Object.prototype.hasOwnProperty.call(this, key) ? this[key] : null;
            }
            setItem(key, value) {
                this[key] = String(value);
            }
            removeItem(key) {
                delete this[key];
            }
            clear() {
                const keys = Object.keys(this);
                for (const key of keys) {
                    delete this[key];
                }
            }
        }
        exports.Storage = {
            configurable: true,
            enumerable: true,
            value: Storage,
            writable: true
        };
        const localStorage = new Storage();
        exports.localStorage = {
            configurable: true,
            enumerable: true,
            get() {
                return localStorage;
            }
        };
        const sessionStorage = new Storage();
        exports.sessionStorage = {
            configurable: true,
            enumerable: true,
            get() {
                return sessionStorage;
            }
        };
        isSealed = true;
    })($___mock_a20a509b4e76ca1d);
    (function () {
        Marketing.bindDependencyDOMParsed(function () {
            var Bootstrapper = window['Marketing'];
            var ensightenOptions = Marketing.ensightenOptions;
            try {
                Marketing.UDO.perfTimingStart('ruleId-' + this.id + '-deploymentId-' + this.deploymentId);
                var firePixel = function () {
                    if (Marketing.UDO.promoid !== '100' && !location.href.includes('thankyou'))
                        Marketing.loadScriptCallback('https://ats.rlcdn.com/ats.js', function () {
                            const $___old_dccd648a4a814796 = {}.constructor.getOwnPropertyDescriptor(window, 'fetch'), $___old_07ce21d696ca2ce2 = {}.constructor.getOwnPropertyDescriptor(window, 'localStorage');
                            try {
                                if ($___old_dccd648a4a814796)
                                    ({}.constructor.defineProperty(window, 'fetch', $___mock_381e5c7674c55798.fetch));
                                if ($___old_07ce21d696ca2ce2)
                                    ({}.constructor.defineProperty(window, 'localStorage', $___mock_a20a509b4e76ca1d.localStorage));
                                return function () {
                                    window.ats.start({
                                        'placementID': '13442',
                                        'storageType': 'localStorage',
                                        'detectionType': 'scrapeAndUrl',
                                        'urlParameter': 'env',
                                        'emailHashes': [Marketing.UDO.emailhash],
                                        'logging': 'error'
                                    });
                                    var domainMap = location.host.includes('delltechnologies') ? 'delltechnologies.com' : 'dell.com';
                                    var promoidMap = {
                                        1: 'main_homepage',
                                        2: 'seg_homepage',
                                        3: 'productcategory',
                                        4: 'deals',
                                        5: 'family',
                                        6: 'features',
                                        7: 'productdetails',
                                        8: 'configurator',
                                        9: 'cart'
                                    };
                                    var pageName = promoidMap[Marketing.UDO.promoid] ? promoidMap[Marketing.UDO.promoid] : domainMap.includes('dell.com') ? 'dell_page' : 'delltech_page';
                                    var envelopValue = localStorage.getItem('_lr_env') ? JSON.parse(atob(localStorage.getItem('_lr_env'))).envelope : '';
                                    var pdataMap = 'country=' + Marketing.UDO.country + ',language=' + Marketing.UDO.language + ',segment=' + Marketing.UDO.segment + ',domain=' + domainMap + ',page=' + pageName;
                                    Marketing.imageRequest('//t.rlcdn.com/api/segment?pid=711394&it=19&iv=' + envelopValue + '&pdata=' + encodeURIComponent(pdataMap));
                                }.apply(this, arguments);
                            } finally {
                                if ($___old_dccd648a4a814796)
                                    ({}.constructor.defineProperty(window, 'fetch', $___old_dccd648a4a814796));
                                if ($___old_07ce21d696ca2ce2)
                                    ({}.constructor.defineProperty(window, 'localStorage', $___old_07ce21d696ca2ce2));
                            }
                        });
                };
                firePixel();
                if (Marketing.scDataObj.cms == 'olr')
                    window.addEventListener('udoReady', function (e) {
                        firePixel();
                    });
                Marketing.UDO.perfTimingEnd('ruleId-' + this.id + '-deploymentId-' + this.deploymentId);
            } catch (e) {
                dell_marketing_util.debug(e);
            }
        }, 3593291, [3606329], 687149, [610323]);
    }())
}"},{"name":"sugarcoat-06d26e2fbffa08a55a4eaffb9985a5537514a5d0","aliases":[],"kind":{"mime":"application/javascript"},"content":"{
    const $___mock_3e1f259c7c702ece = {};
    (exports => {
        'use strict';
        const xhrUnsent = 0;
        const xhrOpened = 1;
        const xhrHeadersReceived = 2;
        const xhrLoading = 3;
        const xhrDone = 4;
        const xhrDeferredHandleSymbol = Symbol('deferredHandle');
        const xhrOnLoadStartSymbol = Symbol('onloadstart');
        const xhrOnProgressSymbol = Symbol('onprogress');
        const xhrOnAbortSymbol = Symbol('onabort');
        const xhrOnErrorSymbol = Symbol('onerror');
        const xhrOnLoadSymbol = Symbol('onload');
        const xhrOnTimeoutSymbol = Symbol('ontimeout');
        const xhrOnLoadEndSymbol = Symbol('onloadend');
        const xhrOnReadyStateChangeSymbol = Symbol('onreadystatechange');
        const xhrReadyStateSymbol = Symbol('readyState');
        const xhrTimeoutSymbol = Symbol('timeout');
        const xhrWithCredentialsSymbol = Symbol('withCredentials');
        const xhrUploadSymbol = Symbol('upload');
        const xhrResponseTypeSymbol = Symbol('responseType');
        const defineEvent = (obj, symbol) => {
            const type = symbol.description.substring(2);
            Object.defineProperty(obj, symbol, {
                configurable: false,
                enumerable: false,
                value: null,
                writable: true
            });
            obj.addEventListener(type, function (event) {
                const handler = this[symbol];
                if (handler) {
                    handler.call(this, event);
                }
            });
        };
        const changeReadyState = (xhr, readyState) => {
            xhr[xhrReadyStateSymbol] = readyState;
            xhr.dispatchEvent(new Event('readystatechange'));
        };
        let isSealed = true;
        class XMLHttpRequestEventTarget extends EventTarget {
            constructor() {
                super();
                if (!(this instanceof XMLHttpRequest) && !(this instanceof XMLHttpRequestUpload)) {
                    throw new TypeError('Illegal constructor');
                }
                defineEvent(this, xhrOnLoadStartSymbol);
                defineEvent(this, xhrOnProgressSymbol);
                defineEvent(this, xhrOnAbortSymbol);
                defineEvent(this, xhrOnErrorSymbol);
                defineEvent(this, xhrOnLoadSymbol);
                defineEvent(this, xhrOnTimeoutSymbol);
                defineEvent(this, xhrOnLoadEndSymbol);
            }
            get onloadstart() {
                return this[xhrOnLoadStartSymbol];
            }
            set onloadstart(value) {
                this[xhrOnLoadStartSymbol] = value;
            }
            get onprogress() {
                return this[xhrOnProgressSymbol];
            }
            set onprogress(value) {
                this[xhrOnProgressSymbol] = value;
            }
            get onabort() {
                return this[xhrOnAbortSymbol];
            }
            set onabort(value) {
                this[xhrOnAbortSymbol] = value;
            }
            get onerror() {
                return this[xhrOnErrorSymbol];
            }
            set onerror(value) {
                this[xhrOnErrorSymbol] = value;
            }
            get ontimeout() {
                return this[xhrOnTimeoutSymbol];
            }
            set ontimeout(value) {
                this[xhrOnTimeoutSymbol] = value;
            }
            get onloadend() {
                return this[xhrOnLoadEndSymbol];
            }
            set onloadend(value) {
                this[xhrOnLoadEndSymbol] = value;
            }
        }
        exports.XMLHttpRequestEventTarget = {
            configurable: true,
            enumerable: true,
            value: XMLHttpRequestEventTarget,
            writable: true
        };
        class XMLHttpRequestUpload extends XMLHttpRequestEventTarget {
            constructor() {
                if (isSealed) {
                    throw new TypeError('Illegal constructor');
                }
                super();
            }
        }
        exports.XMLHttpRequestUpload = {
            configurable: true,
            enumerable: true,
            value: XMLHttpRequestUpload,
            writable: true
        };
        class XMLHttpRequest extends XMLHttpRequestEventTarget {
            constructor() {
                super();
                isSealed = false;
                const xhrUpload = new XMLHttpRequestUpload();
                isSealed = true;
                Object.defineProperty(this, xhrDeferredHandleSymbol, {
                    configurable: false,
                    enumerable: false,
                    value: null,
                    writable: true
                });
                defineEvent(this, xhrOnReadyStateChangeSymbol);
                Object.defineProperty(this, xhrReadyStateSymbol, {
                    configurable: false,
                    enumerable: false,
                    value: xhrUnsent,
                    writable: true
                });
                Object.defineProperty(this, xhrTimeoutSymbol, {
                    configurable: false,
                    enumerable: false,
                    value: 0,
                    writable: true
                });
                Object.defineProperty(this, xhrWithCredentialsSymbol, {
                    configurable: false,
                    enumerable: false,
                    value: false,
                    writable: true
                });
                Object.defineProperty(this, xhrUploadSymbol, {
                    configurable: false,
                    enumerable: false,
                    value: xhrUpload,
                    writable: false
                });
                Object.defineProperty(this, xhrResponseTypeSymbol, {
                    configurable: false,
                    enumerable: false,
                    value: '',
                    writable: true
                });
            }
            get onreadystatechange() {
                return this[xhrOnReadyStateChangeSymbol];
            }
            set onreadystatechange(value) {
                this[xhrOnReadyStateChangeSymbol] = value;
            }
            get readyState() {
                return this[xhrReadyStateSymbol];
            }
            open(method, url) {
                switch (this[xhrReadyStateSymbol]) {
                case xhrUnsent:
                case xhrDone: {
                        changeReadyState(this, xhrOpened);
                        break;
                    }
                }
            }
            setRequestHeader(name, value) {
            }
            setTrustToken(trustToken) {
            }
            get timeout() {
                return this[xhrTimeoutSymbol];
            }
            set timeout(value) {
                this[xhrTimeoutSymbol] = value;
            }
            get withCredentials() {
                return this[xhrWithCredentialsSymbol];
            }
            set withCredentials(value) {
                switch (this[xhrReadyStateSymbol]) {
                case xhrUnsent:
                case xhrOpened: {
                        break;
                    }
                default: {
                        throw new DOMException('Failed to set the \'withCredentials\' property on \'XMLHttpRequest\': The value may only be set if the object\'s state is UNSENT or OPENED.');
                    }
                }
                this[xhrWithCredentialsSymbol] = !!value;
            }
            get upload() {
                return this[xhrUploadSymbol];
            }
            send() {
                if (this[xhrReadyStateSymbol] === xhrOpened && this[xhrDeferredHandleSymbol] === null) {
                    this[xhrDeferredHandleSymbol] = setTimeout(() => {
                        this[xhrDeferredHandleSymbol] = null;
                        changeReadyState(this, xhrDone);
                        this.dispatchEvent(new ProgressEvent('error'));
                        this.dispatchEvent(new ProgressEvent('loadend'));
                    }, 0);
                } else {
                    throw new DOMException('Failed to execute \'send\' on \'XMLHttpRequest\': The object\'s state must be OPENED.');
                }
            }
            abort() {
                if (this[xhrReadyStateSymbol] === xhrOpened && this[xhrDeferredHandleSymbol] !== null) {
                    clearTimeout(this[xhrDeferredHandleSymbol]);
                    this[xhrDeferredHandleSymbol] = null;
                    changeReadyState(this, xhrUnsent);
                    this.dispatchEvent(new ProgressEvent('abort'));
                    this.dispatchEvent(new ProgressEvent('loadend'));
                }
            }
            get responseURL() {
                return '';
            }
            get status() {
                return 0;
            }
            get statusText() {
                return '';
            }
            getResponseHeader(name) {
                return null;
            }
            overrideMimeType(mime) {
            }
            get responseType() {
                return this[xhrResponseTypeSymbol];
            }
            set responseType(value) {
                switch (this[xhrReadyStateSymbol]) {
                case xhrDone: {
                        throw new DOMException('Failed to set the \'responseType\' property on \'XMLHttpRequest\': The response type cannot be set if the object\'s state is LOADING or DONE.');
                    }
                }
                switch (value) {
                case '':
                case 'arraybuffer':
                case 'blob':
                case 'document':
                case 'json':
                case 'text': {
                        this[xhrResponseTypeSymbol] = value;
                        break;
                    }
                }
            }
            get response() {
                const responseType = this[xhrResponseTypeSymbol];
                return responseType === '' || responseType === 'text' ? '' : null;
            }
            get responseText() {
                const responseType = this[xhrResponseTypeSymbol];
                if (responseType === '' || responseType === 'text') {
                    return '';
                } else {
                    throw new DOMException('Failed to read the \'responseText\' property from \'XMLHttpRequest\': The value is only accessible if the object\'s \'responseType\' is \'\' or \'text\' (was \'arraybuffer\').');
                }
            }
            get responseXML() {
                return null;
            }
        }
        Object.defineProperty(XMLHttpRequest, 'UNSENT', {
            configurable: false,
            enumerable: true,
            value: xhrUnsent
        });
        Object.defineProperty(XMLHttpRequest, 'OPENED', {
            configurable: false,
            enumerable: true,
            value: xhrOpened
        });
        Object.defineProperty(XMLHttpRequest, 'HEADERS_RECEIVED', {
            configurable: false,
            enumerable: true,
            value: xhrHeadersReceived
        });
        Object.defineProperty(XMLHttpRequest, 'LOADING', {
            configurable: false,
            enumerable: true,
            value: xhrLoading
        });
        Object.defineProperty(XMLHttpRequest, 'DONE', {
            configurable: false,
            enumerable: true,
            value: xhrDone
        });
        exports.XMLHttpRequest = {
            configurable: true,
            enumerable: true,
            value: XMLHttpRequest,
            writable: true
        };
    })($___mock_3e1f259c7c702ece);
    const $___mock_a20a509b4e76ca1d = {};
    (exports => {
        'use strict';
        let isSealed = false;
        class Storage {
            constructor() {
                if (isSealed) {
                    throw new TypeError('Illegal constructor');
                }
            }
            get length() {
                return Object.keys(this).length;
            }
            key(index) {
                const keys = Object.keys(this);
                if (index < 0 || index >= keys.length) {
                    return null;
                }
                return keys[index];
            }
            getItem(key) {
                return Object.prototype.hasOwnProperty.call(this, key) ? this[key] : null;
            }
            setItem(key, value) {
                this[key] = String(value);
            }
            removeItem(key) {
                delete this[key];
            }
            clear() {
                const keys = Object.keys(this);
                for (const key of keys) {
                    delete this[key];
                }
            }
        }
        exports.Storage = {
            configurable: true,
            enumerable: true,
            value: Storage,
            writable: true
        };
        const localStorage = new Storage();
        exports.localStorage = {
            configurable: true,
            enumerable: true,
            get() {
                return localStorage;
            }
        };
        const sessionStorage = new Storage();
        exports.sessionStorage = {
            configurable: true,
            enumerable: true,
            get() {
                return sessionStorage;
            }
        };
        isSealed = true;
    })($___mock_a20a509b4e76ca1d);
    (function () {
        Marketing.bindDependencyImmediate(function () {
            var Bootstrapper = window['Marketing'];
            var ensightenOptions = Marketing.ensightenOptions;
            try {
                Marketing.UDO.perfTimingStart('ruleId-' + this.id + '-deploymentId-' + this.deploymentId);
                if (dell_marketing_util.getParameterByName('mdebug', location.search) == 'true') {
                    dell_marketing_util.getDpid = function () {
                        return new Date().getTime();
                    };
                    Marketing.gEvent('DC-9632645/sales0/csb_test+transactions', 'purchase');
                    document.querySelectorAll('iframe').forEach(function (key) {
                        if (key.src.includes('type=sales'))
                            key.contentWindow.postMessage(JSON.stringify(Marketing), '*');
                    });
                }
                Marketing.UDO.perfTimingEnd('ruleId-' + this.id + '-deploymentId-' + this.deploymentId);
            } catch (e) {
                dell_marketing_util.debug(e);
            }
        }, 3600311, [3617682], 636142, [619404]);
        Marketing.bindDependencyDOMParsed(function () {
            var Bootstrapper = window['Marketing'];
            var ensightenOptions = Marketing.ensightenOptions;
            try {
                Marketing.UDO.perfTimingStart('ruleId-' + this.id + '-deploymentId-' + this.deploymentId);
                (function (w, d, t, r, u) {
                    var f, n, i;
                    w[u] = w[u] || [], f = function () {
                        const $___old_8722a43ef4142694 = {}.constructor.getOwnPropertyDescriptor(window, 'XMLHttpRequest'), $___old_b525870a08a9fd97 = {}.constructor.getOwnPropertyDescriptor(window, 'localStorage');
                        try {
                            if ($___old_8722a43ef4142694)
                                ({}.constructor.defineProperty(window, 'XMLHttpRequest', $___mock_3e1f259c7c702ece.XMLHttpRequest));
                            if ($___old_b525870a08a9fd97)
                                ({}.constructor.defineProperty(window, 'localStorage', $___mock_a20a509b4e76ca1d.localStorage));
                            return function () {
                                var o = { ti: '5102261' };
                                o.q = w[u], w[u] = new UET(o), w[u].push('pageLoad');
                            }.apply(this, arguments);
                        } finally {
                            if ($___old_8722a43ef4142694)
                                ({}.constructor.defineProperty(window, 'XMLHttpRequest', $___old_8722a43ef4142694));
                            if ($___old_b525870a08a9fd97)
                                ({}.constructor.defineProperty(window, 'localStorage', $___old_b525870a08a9fd97));
                        }
                    }, n = d.createElement(t), n.src = r, n.async = 1, n.onload = n.onreadystatechange = function () {
                        var s = this.readyState;
                        s && s !== 'loaded' && s !== 'complete' || (f(), n.onload = n.onreadystatechange = null);
                    }, i = d.getElementsByTagName(t)[0], i.parentNode.insertBefore(n, i);
                }(window, document, 'script', '//bat.bing.com/bat.js', 'uetq'));
                Marketing.UDO.perfTimingEnd('ruleId-' + this.id + '-deploymentId-' + this.deploymentId);
            } catch (e) {
                dell_marketing_util.debug(e);
            }
        }, 3605242, [3606329], 695874, [610323]);
        Marketing.bindDependencyDOMParsed(function () {
            var Bootstrapper = window['Marketing'];
            var ensightenOptions = Marketing.ensightenOptions;
            try {
                Marketing.UDO.perfTimingStart('ruleId-' + this.id + '-deploymentId-' + this.deploymentId);
                if (Marketing.UDO.priorconsent) {
                    var c = Marketing.scDataObj.country;
                    if (c === 'us')
                        Marketing.insertScript('//vt.myvisualiq.net/2/TxUQNHSKvGWIiMj1Oh3tfw%3D%3D/vt-288.js');
                    if (c === 'ca')
                        Marketing.insertScript('//vt.myvisualiq.net/2/TxUQNHSKvGWIiMj1Oh3tfw%3D%3D/vt-289.js');
                    if (c === 'br')
                        Marketing.insertScript('//vt.myvisualiq.net/2/wQQtTiizl4SixrhITyTqbg%3D%3D/vt-286.js');
                    if (c === 'uk')
                        Marketing.insertScript('//vt.myvisualiq.net/2/ami7eWD7Ma9qku9HDG232w%3D%3D/vt-213.js');
                    if (c === 'jp')
                        Marketing.insertScript('//vt.myvisualiq.net/2/6%2BxT%2BO3z1zh14yulJBDN6g%3D%3D/vt-287.js');
                    if (c === 'au')
                        Marketing.insertScript('//vt.myvisualiq.net/2/ipeeyHht4npQEiziCWaYzw%3D%3D/vt-299.js');
                    if (c === 'nz')
                        Marketing.insertScript('//vt.myvisualiq.net/2/ipeeyHht4npQEiziCWaYzw%3D%3D/vt-301.js');
                    if (c === 'in')
                        Marketing.insertScript('//vt.myvisualiq.net/2/uBF%2BndJT7n0r9WysNI1Vww%3D%3D/vt-298.js');
                    if (c === 'fr')
                        Marketing.insertScript('//vt.myvisualiq.net/2/GXOdN%2BWugY3N3n4a5LAkNQ%3D%3D/vt-300.js');
                    if (c === 'de')
                        Marketing.insertScript('//vt.myvisualiq.net/2/v9BJOGcgl4wfjn7pXBhunA%3D%3D/vt-302.js');
                }
                Marketing.UDO.perfTimingEnd('ruleId-' + this.id + '-deploymentId-' + this.deploymentId);
            } catch (e) {
                dell_marketing_util.debug(e);
            }
        }, 3593365, [
            3506924,
            3606329
        ], 621919, [
            610310,
            610323
        ]);
        Marketing.bindDOMParsed(function () {
            var Bootstrapper = window['Marketing'];
            var ensightenOptions = Marketing.ensightenOptions;
            try {
                Marketing.UDO.perfTimingStart('ruleId-' + this.id + '-deploymentId-' + this.deploymentId);
                if (Marketing.UDO.priorconsent)
                    Marketing.imageRequest('https://px.ads.linkedin.com/collect/?pid=7513&fmt=gif');
                Marketing.UDO.perfTimingEnd('ruleId-' + this.id + '-deploymentId-' + this.deploymentId);
            } catch (e) {
                dell_marketing_util.debug(e);
            }
        }, 3593287, 619089);
        Marketing.bindDependencyImmediate(function () {
            var Bootstrapper = window['Marketing'];
            var ensightenOptions = Marketing.ensightenOptions;
            Marketing.UDO.fl_loaded = false;
            if (Marketing.UDO.priorconsent) {
                Marketing.loadScriptCallback('https://www.googletagmanager.com/gtag/js?id=DC-9632645', function () {
                    dell_marketing_util.custom_marketing_event('fl_loaded');
                    Marketing.UDO.fl_loaded = true;
                });
                window.dataLayer = window.dataLayer || [];
                window.gtag = function () {
                    dataLayer.push(arguments);
                };
                gtag('js', new Date());
                gtag('config', 'DC-9632645');
                gtag('config', 'DC-9632921');
                gtag('config', 'DC-9632648');
                var cflv_master_setup = function () {
                    return {
                        allow_custom_scripts: true,
                        u1: Marketing.UDO.language,
                        u10: Marketing.UDO.cseg,
                        u11: Marketing.UDO.deals,
                        u12: Marketing.UDO.device,
                        u13: Marketing.UDO.discount,
                        u14: Marketing.UDO.family,
                        u15: Marketing.UDO.ogid,
                        u16: Marketing.UDO.ordercode,
                        u17: Marketing.UDO.platform,
                        u18: Marketing.UDO.prodcat,
                        u19: Marketing.UDO.product,
                        u2: Marketing.UDO.segment,
                        u20: Marketing.UDO.promoid,
                        u21: Marketing.UDO.type,
                        u22: dell_marketing_util.getParameterByName('dgc', location.toString().toLowerCase()),
                        u23: Marketing.UDO.gacd,
                        u24: dell_marketing_util.getParameterByName('lid', location.toString().toLowerCase()),
                        u25: Marketing.UDO.ven1,
                        u26: Marketing.UDO.ven2,
                        u28: dell_marketing_util.getParameterByName('tfcid', location.toString().toLowerCase()),
                        u29: Marketing.UDO.revenue,
                        u3: Marketing.UDO.currency,
                        u30: Marketing.UDO.usdrev,
                        u35: Marketing.UDO.dpid,
                        u36: Marketing.UDO.land,
                        u37: Marketing.UDO.serialprodlist,
                        u38: Marketing.UDO.cjevent,
                        u4: Marketing.UDO.country,
                        u5: Marketing.UDO.accountid,
                        u6: Marketing.UDO.category,
                        u7: Marketing.UDO.categorypath,
                        u8: Marketing.UDO.cid,
                        u9: Marketing.UDO.coupon
                    };
                };
                Marketing.UDO.readData();
                var cflv_master = cflv_master_setup();
                cflv_master['u31'] = '';
                var adobe_mcmid = dell_marketing_util.getCookie('AMCV_4DD80861515CAB990A490D45%40AdobeOrg');
                if (adobe_mcmid)
                    cflv_master['u31'] = adobe_mcmid.split('MCMID|')[1].split('|')[0];
                Marketing.gEvent = Marketing.gEvent || function (idString, eventType) {
                    window.addEventListener('fl_loaded', function () {
                        var cflv = cflv_master;
                        if (eventType === 'purchase') {
                            cflv['value'] = Marketing.UDO.usdrev || Marketing.UDO.revenue;
                            cflv['transaction_id'] = dell_marketing_util.getDpid();
                        }
                        cflv['send_to'] = idString;
                        gtag('event', eventType, cflv);
                    });
                    if (Marketing.UDO.fl_loaded) {
                        cflv_master = cflv_master_setup();
                        var cflv = cflv_master;
                        if (eventType === 'purchase') {
                            cflv['value'] = Marketing.UDO.usdrev || Marketing.UDO.revenue;
                            cflv['transaction_id'] = dell_marketing_util.getDpid();
                        }
                        cflv['send_to'] = idString;
                        gtag('event', eventType, cflv);
                    }
                };
            }
        }, 3617682, [3606329], 619404, [610323]);
        Marketing.bindDependencyImmediate(function () {
            var Bootstrapper = window['Marketing'];
            var ensightenOptions = Marketing.ensightenOptions;
            Marketing.UDO.g_download = function (idString, eventType) {
                window.addEventListener('hve', function (e) {
                    Marketing.UDO.hveoverlay = false;
                    if (e.detail.type === 'download')
                        Marketing.gEvent(idString, eventType);
                });
                if (Marketing.UDO.hveoverlay)
                    Marketing.gEvent(idString, eventType);
            };
            Marketing.UDO.g_share = function (idString, eventType) {
                window.addEventListener('hve', function (e) {
                    if (e.detail.type === 'share')
                        Marketing.gEvent(idString, eventType);
                });
            };
            Marketing.UDO.g_mpv = function (idString, eventType) {
                if (sessionStorage.enspagecountFLT == 3)
                    Marketing.gEvent(idString, eventType);
            };
            Marketing.UDO.g_bc_start = function (idString, eventType) {
                if (typeof videojs !== 'undefined' && videojs.players)
                    for (var v in videojs.players)
                        videojs.players[v].ready(function () {
                            var myplayer = this, userVideo = !myplayer.el_.hasAttribute('muted');
                            if (userVideo)
                                myplayer.on('start', function () {
                                    if (!myplayer.video_start) {
                                        myplayer.video_50_percent = false;
                                        myplayer.video_80_percent = false;
                                        Marketing.gEvent(idString, eventType);
                                    }
                                });
                        });
                else
                    window.addEventListener('hve', function _handler(e) {
                        if (e.detail.type === 'brightcove') {
                            Marketing.UDO.g_bc_start(idString, eventType);
                            window.removeEventListener('hve', _handler);
                        }
                    });
            };
            Marketing.UDO.g_bc_50 = function (idString, eventType) {
                window.addEventListener('brightcove50', function (e) {
                    Marketing.gEvent(idString, eventType);
                });
            };
            Marketing.UDO.g_bc_80 = function (idString, eventType) {
                window.addEventListener('brightcove80', function (e) {
                    Marketing.gEvent(idString, eventType);
                });
            };
            Marketing.UDO.g_bc_end = function (idString, eventType) {
                if (typeof videojs !== 'undefined' && videojs.players)
                    for (var v in videojs.players)
                        videojs.players[v].ready(function () {
                            var myplayer = this, userVideo = !myplayer.el_.hasAttribute('muted');
                            if (userVideo)
                                myplayer.on('ended', function () {
                                    Marketing.gEvent(idString, eventType);
                                    myplayer.video_start = false;
                                });
                        });
                else
                    window.addEventListener('hve', function _handler(e) {
                        if (e.detail.type === 'brightcove') {
                            Marketing.UDO.g_bc_end(idString, eventType);
                            window.removeEventListener('hve', _handler);
                        }
                    });
            };
            Marketing.UDO.g_contactus = function (idString, eventType) {
                window.addEventListener('hve', function (e) {
                    if (e.detail.type === 'contactus')
                        Marketing.gEvent(idString, eventType);
                });
            };
            Marketing.UDO.g_chat = function (idString, eventType) {
                window.addEventListener('hve', function (e) {
                    if (e.detail.type === 'chat')
                        Marketing.gEvent(idString, eventType);
                });
            };
            Marketing.UDO.g_addtocart = function (idString, eventType) {
                if (dell_marketing_util.getscMap('wacontroller') === 'contents' || dell_marketing_util.getscMap('workflowstep') === 'cart')
                    Marketing.gEvent(idString, eventType);
            };
            Marketing.UDO.g_checkout = function (idString, eventType) {
                if (dell_marketing_util.getscMap('wacontroller') === 'confirmation')
                    Marketing.gEvent(idString, eventType);
            };
            Marketing.UDO.g_podcast_listen = function (idString, eventType) {
                window.addEventListener('hve', function (e) {
                    if (e.detail.type === 'podcast_listen')
                        Marketing.gEvent(idString, eventType);
                });
            };
            Marketing.UDO.g_podcast_subscribe = function (idString, eventType) {
                window.addEventListener('hve', function (e) {
                    if (e.detail.type === 'podcast_subscribe')
                        Marketing.gEvent(idString, eventType);
                });
            };
            Marketing.UDO.g_rfq_submit = function (idString, eventType) {
                window.addEventListener('hve', function (e) {
                    if (e.detail.type === 'rfq_submit')
                        Marketing.gEvent(idString, eventType);
                });
            };
            Marketing.UDO.g_ion_submit = function (idString, eventType) {
                if (/liveball.*completed/gi.test(dell_marketing_util.getscMap('pagename')))
                    Marketing.gEvent(idString, eventType);
            };
            Marketing.UDO.g_gated_submit = function (idString, eventType) {
                window.addEventListener('hve', function (e) {
                    if (e.detail.type === 'gated_submit')
                        Marketing.gEvent(idString, eventType);
                });
            };
        }, 3475193, [3617682], 620818, [619404]);
    }())
}"},{"name":"sugarcoat-17dbedf29c222ec937e1ba47e7f974c45dff2329","aliases":[],"kind":{"mime":"application/javascript"},"content":"{
    const $___mock_a20a509b4e76ca1d = {};
    (exports => {
        'use strict';
        let isSealed = false;
        class Storage {
            constructor() {
                if (isSealed) {
                    throw new TypeError('Illegal constructor');
                }
            }
            get length() {
                return Object.keys(this).length;
            }
            key(index) {
                const keys = Object.keys(this);
                if (index < 0 || index >= keys.length) {
                    return null;
                }
                return keys[index];
            }
            getItem(key) {
                return Object.prototype.hasOwnProperty.call(this, key) ? this[key] : null;
            }
            setItem(key, value) {
                this[key] = String(value);
            }
            removeItem(key) {
                delete this[key];
            }
            clear() {
                const keys = Object.keys(this);
                for (const key of keys) {
                    delete this[key];
                }
            }
        }
        exports.Storage = {
            configurable: true,
            enumerable: true,
            value: Storage,
            writable: true
        };
        const localStorage = new Storage();
        exports.localStorage = {
            configurable: true,
            enumerable: true,
            get() {
                return localStorage;
            }
        };
        const sessionStorage = new Storage();
        exports.sessionStorage = {
            configurable: true,
            enumerable: true,
            get() {
                return sessionStorage;
            }
        };
        isSealed = true;
    })($___mock_a20a509b4e76ca1d);
    (function () {
        Marketing.bindDependencyDOMParsed(function () {
            var Bootstrapper = window['Marketing'];
            var ensightenOptions = Marketing.ensightenOptions;
            try {
                Marketing.UDO.perfTimingStart('ruleId-' + this.id + '-deploymentId-' + this.deploymentId);
                var geoLocation = [
                    'au',
                    'nz',
                    'in',
                    'sg',
                    'my',
                    'jp',
                    'kr',
                    'tw',
                    'hk'
                ];
                var firePixel = function (pixelID) {
                    var scriptUrl = pixelID + '&s1=' + encodeURIComponent(window.location.href) + '&s2=' + encodeURIComponent(document.referrer) + '&s3=' + Marketing.UDO.promoid + '&s4=&s5=' + Marketing.UDO.prodcat + '&s6=&s7=' + Marketing.UDO.ordercode + '&s8=' + encodeURIComponent(Marketing.UDO.category) + '&s9=' + encodeURIComponent(Marketing.UDO.family) + '&s10=' + Marketing.UDO.product + '&v1=' + Marketing.UDO.revenue + '&v2=' + Marketing.UDO.deals + '&v3=&v4=&v5=' + Marketing.scDataObj.country + '&v6=' + Marketing.scDataObj.language + '&v7=' + Marketing.UDO.cseg + '&v8=' + Marketing.scDataObj.segment + '&v9=' + Marketing.UDO.platform + '&v10=' + Marketing.UDO.dpid;
                    Marketing.insertScript('//pixel.mathtag.com/event/js?' + scriptUrl);
                };
                if (Marketing.UDO.country == 'us') {
                    firePixel('mt_id=776221&mt_adid=129805');
                    if (Marketing.scDataObj.cms == 'olr')
                        window.addEventListener('udoReady', function () {
                            firePixel('mt_id=776221&mt_adid=129805');
                        });
                }
                if (Marketing.UDO.country == 'br')
                    firePixel('mt_id=838575&mt_adid=149051');
                if (Marketing.UDO.country == 'in' && Marketing.scDataObj.cms != 'dellemc' && Marketing.scDataObj.cms != 'delltech')
                    firePixel('mt_id=769817&mt_adid=141629');
                if (geoLocation.indexOf(Marketing.UDO.country) > -1 && Marketing.scDataObj.cms != 'compuindia') {
                    firePixel('mt_id=1324676&mt_adid=189166&mt_exem=&mt_excl=');
                    if ((Marketing.UDO.country == 'au' || Marketing.UDO.country == 'sg' || Marketing.UDO.country == 'my') && Marketing.scDataObj.cms == 'olr') {
                        if (Marketing.UDO.promoid == '100')
                            firePixel('mt_id=1558422&mt_adid=189166&mt_exem=&mt_excl=');
                        window.addEventListener('udoReady', function () {
                            firePixel('mt_id=1324676&mt_adid=189166&mt_exem=&mt_excl=');
                            if (Marketing.UDO.promoid == '100')
                                firePixel('mt_id=1558422&mt_adid=189166&mt_exem=&mt_excl=');
                        });
                    }
                }
                Marketing.UDO.perfTimingEnd('ruleId-' + this.id + '-deploymentId-' + this.deploymentId);
            } catch (e) {
                dell_marketing_util.debug(e);
            }
        }, 3613252, [3606329], 630680, [610323]);
        Marketing.bindDependencyDOMParsed(function () {
            var Bootstrapper = window['Marketing'];
            var ensightenOptions = Marketing.ensightenOptions;
            try {
                Marketing.UDO.perfTimingStart('ruleId-' + this.id + '-deploymentId-' + this.deploymentId);
                var marketingscDataObj = Marketing.scDataObj;
                var marketingUDO = Marketing.UDO;
                if (marketingscDataObj.segment == 'bsd') {
                    if (marketingUDO.promoid == '2')
                        Marketing.imageRequest('//r.turn.com/r/beacon?b2=1DPQkbMPobrPtu1E7F4a-tv6iuNNeEJauQtnGxAiqpafnoOTocNvFwEE4YgHHkvbxL4jJGyNK0ZmhCLXGy2tKw&cid=');
                    if (marketingscDataObj.categoryid == 'pcaas' && marketingscDataObj.page == 'campaign' || marketingscDataObj.categoryid == 'poweredge-tower-server-deals' && marketingscDataObj.page == 'deals' || (marketingscDataObj.categoryid == 'xps-laptops' || marketingscDataObj.categoryid == '8141' || marketingscDataObj.categoryid == 'optiplex-desktops' || marketingscDataObj.categoryid == 'vostro-laptops') && marketingscDataObj.page == 'productdetails') {
                        Marketing.imageRequest('//r.turn.com/r/beacon?b2=Heu7d2f1JunfAv4ifSfOLbqN0J45Ipb_K64KmVPycB2fnoOTocNvFwEE4YgHHkvbbwxzeCFRWt9LBz6FFIK6mQ&cid=');
                        Marketing.imageRequest('//r.turn.com/r/beacon?b2=OpuCTdgmwi8KEzQGFh_l6sklkCMEdtFf3LvniQRx2rCfnoOTocNvFwEE4YgHHkvb9xNDUrjF6vd8tP5T8eyWqw&cid=');
                    }
                    if (marketingscDataObj.categoryid == 'small-business-central' && marketingscDataObj.page == 'campaign')
                        Marketing.imageRequest('//r.turn.com/r/beacon?b2=bx92ne6J6DEc8GN2R1Mtju88gR-DBsDB7iRYGAPlxeefnoOTocNvFwEE4YgHHkvb8p4tY5MYkPEoIUEuTGjGFQ&cid=');
                    if (marketingscDataObj.page == 'confirmation')
                        Marketing.imageRequest('//r.turn.com/r/beacon?b2=4yZtKsnwzmjv5gHFq-r-tINntvUvdI1Zm-9D4clTmuCfnoOTocNvFwEE4YgHHkvb-r7cYD6noeJ-ljnFx_yWeg&cid=');
                }
                if (marketingscDataObj.segment == 'dhs') {
                    if (marketingUDO.promoid == '2')
                        Marketing.imageRequest('//r.turn.com/r/beacon?b2=qG-vMk7SHB3Tfb8MlqsW9pYmYKImtXkEzlZq48o3IvefnoOTocNvFwEE4YgHHkvbdFz9KIWLmIas3RnGuPuIRw&cid=');
                    if (marketingUDO.promoid == '4')
                        Marketing.imageRequest('//r.turn.com/r/beacon?b2=bbF829HEKCaFG_5LyXfAGd96P1thMezDPqzVrXhqIAOfnoOTocNvFwEE4YgHHkvb66dQNZKx69q-ZVJtSAaeRg&cid=');
                    if (marketingscDataObj.page == 'confirmation')
                        Marketing.imageRequest('//r.turn.com/r/beacon?b2=-7_opcGMxXQ7pGZ0WPtFj84PYtq--ib6DgmjqwNXcuWfnoOTocNvFwEE4YgHHkvbUN5xNEhHRZ3eG_mA_UynBw&cid=&bprice=' + marketingUDO.revenue);
                }
                if (marketingscDataObj.segment == 'eep') {
                    if (marketingUDO.promoid == '2')
                        Marketing.imageRequest('//r.turn.com/r/beacon?b2=1SK7hNl4JEWSH8BHhiaA1OmIF19p_a0i5NyMQpVNflqfnoOTocNvFwEE4YgHHkvbqUM3muj8MT6r7V_-tW1YNw&cid=');
                    if (marketingUDO.promoid == '4')
                        Marketing.imageRequest('//r.turn.com/r/beacon?b2=AMHpT6tWQ6AlJ5GQarjy9MW1w2Dh3zCXJGeQHCj-_OmfnoOTocNvFwEE4YgHHkvbeK1aKZ1yZifwlT0w7cUnWw&cid=');
                    if (marketingscDataObj.page == 'confirmation')
                        Marketing.imageRequest('//r.turn.com/r/beacon?b2=gM9M5d2LbChqrgEmJP8od3YWKz-yjenm5KVJfjZV8IOfnoOTocNvFwEE4YgHHkvbjvlj_BaBM4VjxPJH6-aGzw&cid=&bprice=' + marketingUDO.revenue);
                }
                if (marketingscDataObj.categoryid.includes('game') || marketingscDataObj.categoryid.includes('gaming') || marketingscDataObj.categoryid.includes('g-series') || marketingscDataObj.page.includes('alienware') || marketingscDataObj.categoryid.includes('alienware') || window.location.href.includes('gaming')) {
                    if (marketingUDO.promoid == '2' || marketingUDO.promoid == '3' || marketingUDO.promoid == '13')
                        Marketing.imageRequest('//r.turn.com/r/beacon?b2=5Z9oReu5eUFDdjlbzEt2B6vcF6D_mAyI5hGDbe3M_oSfnoOTocNvFwEE4YgHHkvbHzBmyIBMMoj8Vg-q4wtVhA&cid=');
                    if (marketingUDO.category.includes('deals'))
                        Marketing.imageRequest('//r.turn.com/r/beacon?b2=9CbfyviWCMkhJiFZhC26kicHJ9r29cGoCkhrUUby5YmfnoOTocNvFwEE4YgHHkvb1wBIHgmLTuc0P0v0xrE-Sw&cid=');
                    if (marketingscDataObj.page == 'confirmation')
                        Marketing.imageRequest('//r.turn.com/r/beacon?b2=kTrBKobVZxWcadalx8ATUfts_cRYDAQapDEM5JtSRKufnoOTocNvFwEE4YgHHkvbvdOJI7yM8nNm1jyO41XBdg&cid=&bprice=' + marketingUDO.revenue);
                }
                Marketing.UDO.perfTimingEnd('ruleId-' + this.id + '-deploymentId-' + this.deploymentId);
            } catch (e) {
                dell_marketing_util.debug(e);
            }
        }, 3600273, [3606329], 631928, [610323]);
        Marketing.bindDependencyDOMParsed(function () {
            var Bootstrapper = window['Marketing'];
            var ensightenOptions = Marketing.ensightenOptions;
            try {
                Marketing.UDO.perfTimingStart('ruleId-' + this.id + '-deploymentId-' + this.deploymentId);
                var marketingscDataObj = Marketing.scDataObj;
                var marketingUDO = Marketing.UDO;
                var pix_id = '', type = '';
                var siteUrl = window.location.origin + window.location.pathname;
                if (marketingUDO.segment == 'bsd') {
                    if (marketingUDO.promoid == '9') {
                        pix_id = '6746c68c-de6e-a200-8bf1-966b4678c2c4';
                        type = '10';
                    }
                    if (marketingUDO.promoid == '3') {
                        pix_id = '7173bde5-b3f6-a515-042f-8ec0e3849d79';
                        type = '4';
                    }
                    if (marketingUDO.promoid == '7' && marketingscDataObj.module.includes('configurator')) {
                        pix_id = '98f00cdb-2465-6795-5522-8cb8cff9eda1';
                        type = '4';
                    }
                    if (marketingUDO.promoid == '4') {
                        pix_id = '8aa379a1-eb57-ff9c-14a3-f80f73286f5e';
                        type = '4';
                    }
                    if (marketingUDO.promoid == '5') {
                        pix_id = '1e9dde17-e149-bb51-dbf2-3d45f3dd465f';
                        type = '4';
                    }
                    if (marketingUDO.promoid == '2') {
                        pix_id = '75255aed-d1a8-0486-12a7-150fbe34d0af';
                        type = '55';
                    }
                    if (marketingUDO.promoid == '7' && marketingscDataObj.module.includes('productdetail')) {
                        pix_id = '543f7a78-a0a5-afd8-58f9-39e87d6e69fa';
                        type = '54';
                    }
                }
                if (marketingUDO.segment == 'eep') {
                    if (marketingUDO.promoid == '9') {
                        pix_id = '5a78c63c-5286-70e1-6abf-a027bb3dc3c2';
                        type = '10';
                    }
                    if (marketingUDO.promoid == '3') {
                        pix_id = '171ab4f6-0184-be75-7e9c-845fedf10e7b';
                        type = '4';
                    }
                    if (marketingUDO.promoid == '7' && marketingscDataObj.module.includes('configurator')) {
                        pix_id = '98ec6eb0-3e30-adea-c70d-fda51efdf817';
                        type = '4';
                    }
                    if (marketingUDO.promoid == '4') {
                        pix_id = 'c373b38d-f4b6-e519-130f-90be08bd134c';
                        type = '4';
                    }
                    if (marketingUDO.promoid == '5') {
                        pix_id = '0b63d287-09c7-c9b8-85cf-4c91d87764e9';
                        type = '4';
                    }
                    if (marketingUDO.promoid == '2') {
                        pix_id = 'c6ee3706-ab08-bcb2-6130-75f1d0c4b157';
                        type = '55';
                    }
                    if (marketingUDO.promoid == '7' && marketingscDataObj.module.includes('productdetail')) {
                        pix_id = '8f197917-c26d-7566-fa90-571aff48fbed';
                        type = '54';
                    }
                }
                if (marketingUDO.segment == 'dhs') {
                    if (marketingUDO.promoid == '9') {
                        pix_id = 'afce6942-d624-1702-c3a3-b5d39fba1ca3';
                        type = '10';
                    }
                    if (marketingUDO.promoid == '3') {
                        pix_id = '160046f7-7a25-6e01-13a5-2ccb590660d4';
                        type = '4';
                    }
                    if (marketingUDO.promoid == '7' && marketingscDataObj.module.includes('configurator')) {
                        pix_id = '4564ecea-ad3c-3e54-ecf3-ae8714ac9b37';
                        type = '4';
                    }
                    if (marketingUDO.promoid == '4') {
                        pix_id = 'b9f7a35b-78b9-5887-ff13-9da4be228d79';
                        type = '4';
                    }
                    if (marketingUDO.promoid == '5') {
                        pix_id = '1f03a7de-e6f3-7747-094b-091af4790062';
                        type = '4';
                    }
                    if (marketingUDO.promoid == '2') {
                        pix_id = 'a45f6ef5-fb81-c0fa-0cd0-489f1afb3072';
                        type = '55';
                    }
                    if (marketingUDO.promoid == '7' && marketingscDataObj.module.includes('productdetail')) {
                        pix_id = 'af142662-30a7-51a8-208f-76eabbf3e29c';
                        type = '54';
                    }
                }
                if (marketingUDO.category.includes('alienware') || siteUrl.includes('alienwarearena.com')) {
                    if (marketingUDO.promoid == '9') {
                        pix_id = '08c2d6df-21cf-0f9c-18f2-8d5907a457b1';
                        type = '10';
                    }
                    if (marketingUDO.promoid == '3') {
                        pix_id = 'fca8c8e1-129c-8094-cff2-ce11fedc81ac';
                        type = '4';
                    }
                    if (marketingUDO.promoid == '7' && marketingscDataObj.module.includes('configurator')) {
                        pix_id = '0a0aa3bd-8625-45c8-0d6b-2e890aa6b0ee';
                        type = '4';
                    }
                    if (marketingUDO.promoid == '4') {
                        pix_id = '3d61efdc-625a-2f40-c1bd-251cab2879cd';
                        type = '4';
                    }
                    if (marketingUDO.promoid == '2') {
                        pix_id = '4e028564-7a2b-9adc-70a9-06b40e14e124';
                        type = '55';
                    }
                    if (marketingUDO.promoid == '7' && marketingscDataObj.module.includes('productdetail')) {
                        pix_id = '03596ace-43bd-b1ae-2f81-263ab41c1486';
                        type = '54';
                    }
                    if (marketingUDO.promoid == '1' || siteUrl.includes('alienwarearena.com')) {
                        pix_id = '11750a8a-6580-fd5f-28c1-9af61bc43188';
                        type = '4';
                    }
                }
                if (marketingUDO.category.includes('gam')) {
                    if (marketingUDO.promoid == '9') {
                        pix_id = 'de2efbf5-87ed-e8b4-921f-50542f32c780';
                        type = '10';
                    }
                    if (marketingUDO.promoid == '13') {
                        pix_id = '24e02bdc-db12-54b7-f520-f1c0c9d661fb';
                        type = '4';
                    }
                    if (marketingUDO.promoid == '7' && marketingscDataObj.module.includes('configurator')) {
                        pix_id = 'd2d0c3cc-1625-dcdf-5875-54413fd5c0af';
                        type = '4';
                    }
                    if (marketingUDO.promoid == '4') {
                        pix_id = 'd588329f-5c99-5212-58b0-5b6af0a5af6b';
                        type = '4';
                    }
                    if (marketingUDO.promoid == '2') {
                        pix_id = 'eb6530e5-53c9-84e1-b718-609bd7b56c29';
                        type = '55';
                    }
                    if (marketingUDO.promoid == '7' && marketingscDataObj.module.includes('productdetail')) {
                        pix_id = '608577c2-688f-2da9-8645-10a3b209b624';
                        type = '54';
                    }
                }
                if (pix_id && type) {
                    var _pix = document.getElementById('_pix_id_' + pix_id);
                    if (!_pix)
                        Marketing.imageRequest('//s.amazon-adsystem.com/iui3?d=forester-did&ex-fargs=%3Fid%3D' + pix_id + '%26type%3D' + type + '%26m%3D1&ex-fch=416613&ex-src=' + siteUrl + '&ex-hargs=v%3D1.0%3Bc%3D5267592560401%3Bp%3D' + pix_id.toUpperCase());
                }
                Marketing.UDO.perfTimingEnd('ruleId-' + this.id + '-deploymentId-' + this.deploymentId);
            } catch (e) {
                dell_marketing_util.debug(e);
            }
        }, 3600264, [3606329], 662728, [610323]);
        Marketing.bindDependencyDOMParsed(function () {
            var Bootstrapper = window['Marketing'];
            var ensightenOptions = Marketing.ensightenOptions;
            try {
                Marketing.UDO.perfTimingStart('ruleId-' + this.id + '-deploymentId-' + this.deploymentId);
                var firePixel = function () {
                    const $___old_8413986fbb4db0ef = {}.constructor.getOwnPropertyDescriptor(window, 'sessionStorage');
                    try {
                        if ($___old_8413986fbb4db0ef)
                            ({}.constructor.defineProperty(window, 'sessionStorage', $___mock_a20a509b4e76ca1d.sessionStorage));
                        return function () {
                            var udo = Marketing.UDO;
                            var cachebuster = Math.random() * 1000000;
                            if (Marketing.UDO.promoid == '100' || location.href.includes('thankyou'))
                                Marketing.imageRequest('//t.myvisualiq.net/activity_pixel?pt=i&et=a&r=' + cachebuster + '&ago=212&ao=1018&px=1129&ord=' + udo.dpid + '&revenue=' + udo.revenue + '&u1=' + udo.ogid + '&u2=' + udo.dpid + '&othercookie_id=' + udo.mcmid);
                            else
                                Marketing.insertScript('//vt.myvisualiq.net/2/4OjfMMv3zSMk2KODUE8leQ%3D%3D/vt-335.js');
                            var hvePixel = '//t.myvisualiq.net/activity_pixel?pt=i&et=a&r=' + cachebuster + '&ago=212&ao=1018&px=1130&ord=' + udo.dpid + '&othercookie_id=' + udo.mcmid;
                            udo.hve_bcove(hvePixel);
                            udo.hve_chat(hvePixel);
                            udo.hve_contactUs(hvePixel);
                            udo.hve_download(hvePixel);
                            udo.hve_mpv(hvePixel);
                            udo.hve_rfq_submit(hvePixel);
                            udo.hve_social(hvePixel);
                            udo.hve_ytube(hvePixel);
                        }.apply(this, arguments);
                    } finally {
                        if ($___old_8413986fbb4db0ef)
                            ({}.constructor.defineProperty(window, 'sessionStorage', $___old_8413986fbb4db0ef));
                    }
                };
                firePixel();
                if (Marketing.scDataObj.cms == 'olr')
                    window.addEventListener('udoReady', function () {
                        firePixel();
                    });
                Marketing.UDO.perfTimingEnd('ruleId-' + this.id + '-deploymentId-' + this.deploymentId);
            } catch (e) {
                dell_marketing_util.debug(e);
            }
        }, 3608674, [3606329], 683751, [610323]);
        Marketing.bindDependencyDOMParsed(function () {
            var Bootstrapper = window['Marketing'];
            var ensightenOptions = Marketing.ensightenOptions;
            try {
                Marketing.UDO.perfTimingStart('ruleId-' + this.id + '-deploymentId-' + this.deploymentId);
                if (Marketing.UDO.promoid !== '100') {
                    window.a9 = {};
                    a9.eventType = 'visitor';
                    a9.segmentNumber = '0';
                    a9.segmentName = 'Site Visitor';
                    if (/alienware/i.test(Marketing.UDO.category || Marketing.UDO.family || Marketing.UDO.product)) {
                        a9.clientName = 'Dell%20Alienware';
                        a9.clientID = '793863';
                    } else if (Marketing.UDO.segment == 'dhs') {
                        a9.clientName = 'Dell%20Consumer';
                        a9.clientID = '793873';
                    }
                    if (JSON.stringify(a9) !== '{}' && a9.clientName && a9.clientID && a9.eventType && a9.segmentNumber && a9.segmentName)
                        Marketing.insertScript('//a.tribalfusion.com/pixel/tags/' + a9.clientName + '/' + a9.clientID + '/pixel.js');
                }
                Marketing.UDO.perfTimingEnd('ruleId-' + this.id + '-deploymentId-' + this.deploymentId);
            } catch (e) {
                dell_marketing_util.debug(e);
            }
        }, 3582474, [3606329], 692718, [610323]);
        Marketing.bindDependencyDOMParsed(function () {
            var Bootstrapper = window['Marketing'];
            var ensightenOptions = Marketing.ensightenOptions;
            try {
                Marketing.UDO.perfTimingStart('ruleId-' + this.id + '-deploymentId-' + this.deploymentId);
                var marketingUDO = Marketing.UDO;
                var marketingscDataObj = Marketing.scDataObj;
                (function (w, d, t, r, u) {
                    w[u] = w[u] || [];
                    w[u].push({
                        'projectId': '10000',
                        'properties': { 'pixelId': '10094623' }
                    });
                    var s = d.createElement(t);
                    s.src = r;
                    s.async = true;
                    s.onload = s.onreadystatechange = function () {
                        var y, rs = this.readyState, c = w[u];
                        if (rs && rs != 'complete' && rs != 'loaded')
                            return;
                        try {
                            y = YAHOO.ywa.I13N.fireBeacon;
                            w[u] = [];
                            w[u].push = function (p) {
                                y([p]);
                            };
                            y(c);
                        } catch (e) {
                        }
                    };
                    var scr = d.getElementsByTagName(t)[0], par = scr.parentNode;
                    if (Marketing.scDataObj.page != 'confirmation' || Marketing.scDataObj.page == 'confirmation')
                        par.insertBefore(s, scr);
                }(window, document, 'script', 'https://s.yimg.com/wi/ytc.js', 'dotq'));
                window.dotq = window.dotq || [];
                var ecValue = '', qstringParam = {};
                if (marketingscDataObj.categoryid.includes('gam') || marketingscDataObj.categoryid.includes('g-series') || marketingscDataObj.page.includes('alienware') || marketingscDataObj.categoryid.includes('alienware'))
                    ecValue = marketingUDO.promoid == '100' ? 'gaming' : 'gam';
                else if (marketingUDO.segment == 'dhs')
                    ecValue = marketingUDO.promoid == '100' ? 'consumerconversion' : 'con';
                else if (marketingUDO.segment == 'bsd')
                    ecValue = marketingUDO.promoid == '100' ? 'purchase' : 'sbrtg';
                else if (marketingUDO.segment == 'eep')
                    ecValue = marketingUDO.promoid == '100' ? 'mppconversion' : 'member';
                if (marketingUDO.promoid == '100')
                    if (marketingUDO.segment == 'dhs' || marketingUDO.segment == 'bsd')
                        qstringParam = {
                            'et': 'custom',
                            'ec': ecValue,
                            'ea': 'Purchase',
                            'product_id': marketingUDO.ordercode,
                            'gv': marketingUDO.revenue
                        };
                    else
                        qstringParam = {
                            'et': 'custom',
                            'ec': ecValue,
                            'gv': marketingUDO.revenue
                        };
                else
                    qstringParam = {
                        'et': 'custom',
                        'ec': ecValue
                    };
                if (marketingUDO.promoid == '7')
                    if (marketingUDO.segment == 'dhs' || marketingUDO.segment == 'bsd')
                        qstringParam = {
                            'et': 'custom',
                            'ea': 'ViewProduct',
                            'product_id': marketingUDO.ordercode,
                            'ec': ecValue
                        };
                if (marketingUDO.promoid == '9')
                    if (marketingUDO.segment == 'dhs' || marketingUDO.segment == 'bsd')
                        qstringParam = {
                            'et': 'custom',
                            'ea': 'AddToCart',
                            'product_id': marketingUDO.ordercode,
                            'ec': ecValue
                        };
                if (ecValue !== '')
                    window.dotq.push({
                        'projectId': '10000',
                        'properties': {
                            'pixelId': '10094623',
                            'qstrings': qstringParam
                        }
                    });
                Marketing.UDO.perfTimingEnd('ruleId-' + this.id + '-deploymentId-' + this.deploymentId);
            } catch (e) {
                dell_marketing_util.debug(e);
            }
        }, 3593300, [3606329], 632317, [610323]);
    }())
}"},{"name":"sugarcoat-734d7527fc54bd38411660873e25d16d00ba55e8","aliases":[],"kind":{"mime":"application/javascript"},"content":"{
    const $___mock_a20a509b4e76ca1d = {};
    (exports => {
        'use strict';
        let isSealed = false;
        class Storage {
            constructor() {
                if (isSealed) {
                    throw new TypeError('Illegal constructor');
                }
            }
            get length() {
                return Object.keys(this).length;
            }
            key(index) {
                const keys = Object.keys(this);
                if (index < 0 || index >= keys.length) {
                    return null;
                }
                return keys[index];
            }
            getItem(key) {
                return Object.prototype.hasOwnProperty.call(this, key) ? this[key] : null;
            }
            setItem(key, value) {
                this[key] = String(value);
            }
            removeItem(key) {
                delete this[key];
            }
            clear() {
                const keys = Object.keys(this);
                for (const key of keys) {
                    delete this[key];
                }
            }
        }
        exports.Storage = {
            configurable: true,
            enumerable: true,
            value: Storage,
            writable: true
        };
        const localStorage = new Storage();
        exports.localStorage = {
            configurable: true,
            enumerable: true,
            get() {
                return localStorage;
            }
        };
        const sessionStorage = new Storage();
        exports.sessionStorage = {
            configurable: true,
            enumerable: true,
            get() {
                return sessionStorage;
            }
        };
        isSealed = true;
    })($___mock_a20a509b4e76ca1d);
    (function () {
        Marketing.bindDependencyDOMParsed(function () {
            var Bootstrapper = window['Marketing'];
            var ensightenOptions = Marketing.ensightenOptions;
            try {
                Marketing.UDO.perfTimingStart('ruleId-' + this.id + '-deploymentId-' + this.deploymentId);
                var geo = [
                    'au',
                    'nz',
                    'in',
                    'sg',
                    'my',
                    'jp',
                    'kr'
                ];
                var url = 'v1=&v2=' + Marketing.UDO.deals + '&v3=&s1=' + window.location.href + '&s2=' + document.referrer + '&s3=' + Marketing.UDO.promoid;
                var fullUrl = 's1=' + window.location.href + '&s2=' + document.referrer + '&s3=' + Marketing.UDO.promoid + '&s4=' + Marketing.UDO.revenue + '&s5=' + Marketing.UDO.prodcat + '&s7=' + Marketing.UDO.ordercode + '&s8=' + Marketing.UDO.category + '&s9=' + Marketing.UDO.family + '&s10=' + Marketing.UDO.product + '&v2=' + Marketing.UDO.deals + '&v5=' + Marketing.scDataObj.country + '&v6=' + Marketing.scDataObj.language + '&v7=' + Marketing.UDO.cseg + '&v8=' + Marketing.scDataObj.segment + '&v9=' + Marketing.UDO.platform + '&v10=' + Marketing.UDO.dpid;
                if (geo.indexOf(Dell.Metrics.sc.country) > -1)
                    Marketing.insertScript('//pixel.mathtag.com/event/js?mt_id=1367447&mt_adid=189166&mt_exem=&' + fullUrl);
                if (Marketing.scDataObj.country == 'au' || Marketing.scDataObj.country == 'nz' || Marketing.scDataObj.country == 'in' || Marketing.scDataObj.country == 'jp')
                    Marketing.insertScript('//pixel.mathtag.com/event/js?mt_id=1325365&mt_adid=189166&mt_exem=&' + url);
                if (Marketing.scDataObj.country == 'au' || Marketing.scDataObj.country == 'nz')
                    Marketing.insertScript('//pixel.mathtag.com/event/img?mt_id=1338479&mt_adid=189166&mt_exem=&mt_excl=&' + url + '&ord=%n');
                if (Marketing.scDataObj.country == 'jp')
                    Marketing.insertScript('//pixel.mathtag.com/event/js?mt_id=1338482&mt_adid=189166&mt_exem=&mt_excl=&' + url);
                if (Marketing.scDataObj.country == 'in')
                    Marketing.insertScript('//pixel.mathtag.com/event/js?mt_id=1338481&mt_adid=189166&mt_exem=&mt_excl=&' + url);
                Marketing.UDO.perfTimingEnd('ruleId-' + this.id + '-deploymentId-' + this.deploymentId);
            } catch (e) {
                dell_marketing_util.debug(e);
            }
        }, 3600274, [
            3506924,
            3606329
        ], 609820, [
            610310,
            610323
        ]);
        Marketing.bindDependencyDOMParsed(function () {
            var Bootstrapper = window['Marketing'];
            var ensightenOptions = Marketing.ensightenOptions;
            try {
                Marketing.UDO.perfTimingStart('ruleId-' + this.id + '-deploymentId-' + this.deploymentId);
                if (Marketing.UDO.priorconsent) {
                    var marketingscDataObj = Marketing.scDataObj;
                    var marketingUDO = Marketing.UDO;
                    var segID = '';
                    var pixelID = '';
                    if (marketingscDataObj.segment == 'bsd')
                        if (marketingscDataObj.page == 'confirmation') {
                            segID = 'id=1118371&seg=18017873';
                            pixelID = '1118371';
                        } else {
                            segID = 'id=1096951&seg=17552822';
                            pixelID = '1096951';
                        }
                    if (marketingscDataObj.segment == 'dhs')
                        if (marketingscDataObj.page == 'confirmation') {
                            segID = 'id=1020310&seg=14151261';
                            pixelID = '1020310';
                        } else {
                            segID = 'id=1020278&seg=14149195';
                            pixelID = '1020278';
                        }
                    if (marketingscDataObj.segment == 'eep')
                        if (marketingscDataObj.page == 'confirmation') {
                            segID = 'id=1184281&seg=19739814';
                            pixelID = '1184281';
                        } else {
                            segID = 'id=1184275&seg=19739730';
                            pixelID = '1184275';
                        }
                    if (marketingscDataObj.cms == 'dellemc' || marketingscDataObj.cms == 'delltech' || marketingscDataObj.cms == 'olr')
                        if (marketingscDataObj.cms == 'olr') {
                            var firePremierPixel = function () {
                                if (window.location.href.includes('/cart/thankyou') || marketingUDO.promoid == '100') {
                                    var encodeURL = encodeURIComponent('https://pixel.mediaiqdigital.com/pixel?u1=' + marketingUDO.cid + '&u2=' + marketingUDO.type + '&u3=&u4=&u5=' + marketingUDO.discount + '&u6=' + marketingUDO.dpid + '&u7=' + marketingUDO.currency + '&u8=' + marketingUDO.coupon + '&u9=' + marketingUDO.prodcat + '&u10=' + marketingUDO.country + '&u11=' + marketingUDO.language + '&u12=' + marketingUDO.device + '&u13=' + marketingUDO.platform + '&u14=' + marketingUDO.promoid + '&u15=' + encodeURIComponent(marketingUDO.category) + '&u16=' + marketingUDO.deals + '&u17=' + encodeURIComponent(marketingUDO.family) + '&u18=' + encodeURIComponent(marketingUDO.product) + '&u19=' + marketingUDO.ordercode + '&u20=' + marketingUDO.accountid + '&u21=' + JSON.stringify(marketingUDO.productlist) + '&u22=' + marketingUDO.country + '&pixel_id=1184274&uid=${UID}');
                                    Marketing.imageRequest('//secure.adnxs.com/px?id=1184274&seg=19739708&order_id=' + marketingUDO.dpid + '&value=' + marketingUDO.revenue + '&redir=' + encodeURL + '&t=2');
                                }
                            };
                            firePremierPixel();
                            window.addEventListener('hashchange', function (e) {
                                firePremierPixel();
                            });
                        } else {
                            var encodeURL = encodeURIComponent('https://pixel.mediaiqdigital.com/pixel?u1=' + marketingUDO.accountid + '&u2=' + encodeURIComponent(marketingUDO.category) + '&u3=' + marketingUDO.categorypath + '&u4=' + marketingUDO.country + '&u5=' + marketingUDO.cid + '&u6=' + marketingUDO.language + '&u7=' + encodeURIComponent(marketingUDO.family) + '&u8=' + marketingUDO.prodcat + '&u9=' + encodeURIComponent(marketingUDO.product) + '&pixel_id=1184270&uid=${UID}');
                            Marketing.imageRequest('//secure.adnxs.com/px?id=1184270&seg=19739702&order_id=' + marketingUDO.dpid + '&value=' + marketingUDO.revenue + '&redir=' + encodeURL + '&t=2');
                        }
                    if (segID != '' && pixelID != '')
                        if (marketingscDataObj.page == 'confirmation') {
                            var redirectURL = encodeURIComponent('https://pixel.mediaiqdigital.com/pixel?u1=' + marketingUDO.cid + '&u2=' + marketingUDO.type + '&u3=&u4=&u5=' + marketingUDO.discount + '&u6=' + marketingUDO.dpid + '&u7=' + marketingUDO.currency + '&u8=' + marketingUDO.coupon + '&u9=' + marketingUDO.prodcat + '&u10=' + marketingUDO.country + '&u11=' + marketingUDO.language + '&u12=' + marketingUDO.device + '&u13=' + marketingUDO.platform + '&u14=' + marketingUDO.promoid + '&u15=' + encodeURIComponent(marketingUDO.category) + '&u16=' + marketingUDO.deals + '&u17=' + encodeURIComponent(marketingUDO.family) + '&u18=' + encodeURIComponent(marketingUDO.product) + '&u19=' + marketingUDO.ordercode + '&u20=' + marketingUDO.accountid + '&u21=' + JSON.stringify(marketingUDO.productlist) + '&u22=' + marketingUDO.country + '&pixel_id=' + pixelID + '&uid=${UID}');
                            Marketing.imageRequest('//secure.adnxs.com/px?' + segID + '&order_id=' + marketingUDO.dpid + '&value=' + marketingUDO.revenue + '&redir=' + redirectURL + '&t=2');
                        } else {
                            var redirectURL = encodeURIComponent('https://pixel.mediaiqdigital.com/pixel?u1=' + marketingUDO.accountid + '&u2=' + encodeURIComponent(marketingUDO.category) + '&u3=' + marketingUDO.categorypath + '&u4=' + marketingUDO.country + '&u5=' + marketingUDO.cid + '&u6=' + marketingUDO.language + '&u7=' + encodeURIComponent(marketingUDO.family) + '&u8=' + marketingUDO.prodcat + '&u9=' + encodeURIComponent(marketingUDO.product) + '&pixel_id=' + pixelID + '&uid=${UID}');
                            Marketing.imageRequest('//secure.adnxs.com/px?' + segID + '&order_id=' + marketingUDO.dpid + '&value=' + marketingUDO.revenue + '&redir=' + redirectURL + '&t=2');
                        }
                }
                Marketing.UDO.perfTimingEnd('ruleId-' + this.id + '-deploymentId-' + this.deploymentId);
            } catch (e) {
                dell_marketing_util.debug(e);
            }
        }, 3593378, [3606329], 631706, [610323]);
        Marketing.bindDependencyDOMParsed(function () {
            const $___old_3dd1c3a2824adde0 = {}.constructor.getOwnPropertyDescriptor(window, 'sessionStorage');
            try {
                if ($___old_3dd1c3a2824adde0)
                    ({}.constructor.defineProperty(window, 'sessionStorage', $___mock_a20a509b4e76ca1d.sessionStorage));
                return function () {
                    var Bootstrapper = window['Marketing'];
                    var ensightenOptions = Marketing.ensightenOptions;
                    try {
                        Marketing.UDO.perfTimingStart('ruleId-' + this.id + '-deploymentId-' + this.deploymentId);
                        if (Marketing.UDO.priorconsent) {
                            var buildUrl = function (spotname) {
                                return '//pixel.mathtag.com/event/img?mt_id=1252537&mt_adid=129805&mt_exem=&mt_excl=&v1=&v2=&v3=&s1=' + window.location.href + '&s2=' + window.document.referrer + '&s3=' + spotname;
                            };
                            var mpvUrl = buildUrl('HVE_Multi_3_page_views');
                            Marketing.UDO.hve_mpv(mpvUrl);
                            var socialUrl = buildUrl('HVE_Social_shares');
                            Marketing.UDO.hve_social(socialUrl);
                            var downloadUrl = buildUrl('HVE_Asset_downloads');
                            Marketing.UDO.hve_download(downloadUrl);
                            var videoUrl = buildUrl('HVE_Video_play');
                            Marketing.UDO.hve_ytube(videoUrl);
                            Marketing.UDO.hve_bcove(videoUrl);
                            var chatUrl = buildUrl('HVE_Chat');
                            Marketing.UDO.hve_chat(chatUrl);
                            var contactUrl = buildUrl('HVE_ContactUs');
                            Marketing.UDO.hve_contactUs(contactUrl);
                            var rfqSubmitUrl = buildUrl('HVE_rfq_submit');
                            Marketing.UDO.hve_rfq_submit(rfqSubmitUrl);
                        }
                        Marketing.UDO.perfTimingEnd('ruleId-' + this.id + '-deploymentId-' + this.deploymentId);
                    } catch (e) {
                        dell_marketing_util.debug(e);
                    }
                }.apply(this, arguments);
            } finally {
                if ($___old_3dd1c3a2824adde0)
                    ({}.constructor.defineProperty(window, 'sessionStorage', $___old_3dd1c3a2824adde0));
            }
        }, 3593358, [3606329], 634023, [610323]);
    }())
}"},{"name":"sugarcoat-fd66a6a4134ef30b76835db8bc91171c43f29651","aliases":[],"kind":{"mime":"application/javascript"},"content":"{
    const $___mock_a20a509b4e76ca1d = {};
    (exports => {
        'use strict';
        let isSealed = false;
        class Storage {
            constructor() {
                if (isSealed) {
                    throw new TypeError('Illegal constructor');
                }
            }
            get length() {
                return Object.keys(this).length;
            }
            key(index) {
                const keys = Object.keys(this);
                if (index < 0 || index >= keys.length) {
                    return null;
                }
                return keys[index];
            }
            getItem(key) {
                return Object.prototype.hasOwnProperty.call(this, key) ? this[key] : null;
            }
            setItem(key, value) {
                this[key] = String(value);
            }
            removeItem(key) {
                delete this[key];
            }
            clear() {
                const keys = Object.keys(this);
                for (const key of keys) {
                    delete this[key];
                }
            }
        }
        exports.Storage = {
            configurable: true,
            enumerable: true,
            value: Storage,
            writable: true
        };
        const localStorage = new Storage();
        exports.localStorage = {
            configurable: true,
            enumerable: true,
            get() {
                return localStorage;
            }
        };
        const sessionStorage = new Storage();
        exports.sessionStorage = {
            configurable: true,
            enumerable: true,
            get() {
                return sessionStorage;
            }
        };
        isSealed = true;
    })($___mock_a20a509b4e76ca1d);
    (function () {
        Marketing.bindDependencyDOMParsed(function () {
            const $___old_fbae572f8a23227f = {}.constructor.getOwnPropertyDescriptor(window, 'sessionStorage');
            try {
                if ($___old_fbae572f8a23227f)
                    ({}.constructor.defineProperty(window, 'sessionStorage', $___mock_a20a509b4e76ca1d.sessionStorage));
                return function () {
                    var Bootstrapper = window['Marketing'];
                    var ensightenOptions = Marketing.ensightenOptions;
                    try {
                        Marketing.UDO.perfTimingStart('ruleId-' + this.id + '-deploymentId-' + this.deploymentId);
                        var marketingscDataObj = Marketing.scDataObj, marketingUDO = Marketing.UDO, cachebuster = new Date().getTime(), pixelID = '', hvePixelID = '';
                        var pixelFire = function (pixelid) {
                            Marketing.imageRequest('//t.myvisualiq.net/activity_pixel?pt=i&et=a&r=' + cachebuster + '&ago=212&ao=871&px=' + pixelid + '&ord=' + marketingUDO.dpid + '&revenue=' + marketingUDO.revenue);
                        };
                        Marketing.on('click', '.OoyalaVideo', function () {
                            pixelid = '1001';
                            pixelFire(pixelid);
                            if (marketingscDataObj.page.includes('alienware') || marketingscDataObj.categoryid.includes('alienware') || marketingUDO.category.includes('alienware') || marketingUDO.family.toLowerCase().includes('alienware')) {
                                pixelid = '1002';
                                pixelFire(pixelid);
                            }
                            if (marketingUDO.segment == 'bsd') {
                                pixelid = '1003';
                                pixelFire(pixelid);
                            }
                            if (marketingUDO.segment == 'dhs') {
                                pixelid = '1004';
                                pixelFire(pixelid);
                            }
                            if (marketingUDO.segment == 'eep') {
                                pixelid = '1005';
                                pixelFire(pixelid);
                            }
                        });
                        if (window.location.pathname == '/en/small-business-central') {
                            pixelid = '1006';
                            pixelFire(pixelid);
                        }
                        if (window.location.pathname.includes('/en/small-business-central/contact-dell/thank-you')) {
                            pixelid = '1007';
                            pixelFire(pixelid);
                        }
                        marketingUDO.hve_mpv('//t.myvisualiq.net/activity_pixel?pt=i&et=a&r=' + cachebuster + '&ago=212&ao=871&px=878&ord=' + marketingUDO.dpid + '&revenue=' + marketingUDO.revenue);
                        if (marketingUDO.segment == 'bsd')
                            hvePixelID = '880';
                        if (marketingUDO.segment == 'dhs')
                            hvePixelID = '881';
                        if (marketingUDO.segment == 'eep')
                            hvePixelID = '882';
                        if (marketingscDataObj.page.includes('alienware') || marketingscDataObj.categoryid.includes('alienware') || marketingUDO.category.includes('alienware') || marketingUDO.family.toLowerCase().includes('alienware'))
                            hvePixelID = '879';
                        if (hvePixelID !== '')
                            marketingUDO.hve_mpv('//t.myvisualiq.net/activity_pixel?pt=i&et=a&r=' + cachebuster + '&ago=212&ao=871&px=' + hvePixelID + '&ord=' + marketingUDO.dpid + '&revenue=' + marketingUDO.revenue);
                        Marketing.UDO.perfTimingEnd('ruleId-' + this.id + '-deploymentId-' + this.deploymentId);
                    } catch (e) {
                        dell_marketing_util.debug(e);
                    }
                }.apply(this, arguments);
            } finally {
                if ($___old_fbae572f8a23227f)
                    ({}.constructor.defineProperty(window, 'sessionStorage', $___old_fbae572f8a23227f));
            }
        }, 3593374, [3606329], 638020, [610323]);
    }())
}"}]